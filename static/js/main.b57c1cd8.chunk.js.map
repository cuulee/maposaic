{"version":3,"sources":["Mapozaic/Drawer.tsx","Mapozaic/Mapozaic.tsx","App.tsx","serviceWorker.ts","index.tsx","Mapozaic/paint.worker.ts"],"names":["Drawer","visible","setDrawerVisible","mapboxStyleURL","changeMapStyle","placement","onClose","Group","onChange","event","target","value","MAPBOX_STYLE_URL","road","administrative","mapboxgl","accessToken","process","styles","width","height","position","paintWorker","PaintWorker","showMapboxCanvas","isMapbox","mapboxElement","document","getElementById","mosaicElement","style","opacity","MapboxGLMap","useState","map","setMap","mapContainer","useRef","setMapboxStyleURL","isLoading","setIsLoading","paintMosaic","a","mapboxCanvas","getCanvas","gl","getContext","console","log","webglWidth","drawingBufferWidth","webglHeight","drawingBufferHeight","viewportWidth","viewportHeight","maposaicCanvas","setAttribute","toString","maposaicContext","imageData","getImageData","maposaicData","data","mapboxPixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","onmessage","e","set","putImageData","postMessage","useEffect","newMap","Map","container","current","zoom","center","lng","lat","on","resize","loaded","isMoving","isZooming","terminate","hasChangedStyle","setHasChangedStyle","drawerVisible","setStyle","className","id","ref","el","spinning","indicator","LoadingOutlined","newStyle","type","shape","onClick","icon","RightCircleFilled","App","Mapozaic","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","Worker"],"mappings":"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","file":"static/js/main.b57c1cd8.chunk.js","sourcesContent":["import React from 'react'\nimport { Drawer as AntDrawer, Radio } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport { MAPBOX_STYLE_URL } from './Mapozaic'\n\ntype PropsType = {\n  visible: boolean\n  setDrawerVisible: (visible: boolean) => void\n  mapboxStyleURL: string\n  changeMapStyle: (style: string) => void\n}\n\nconst Drawer = ({ visible, setDrawerVisible, mapboxStyleURL, changeMapStyle }: PropsType) => {\n  const onStyleUrlChange = (event: RadioChangeEvent) => {\n    changeMapStyle(event.target.value)\n  }\n\n  return (\n    <AntDrawer visible={visible} placement=\"left\" onClose={() => setDrawerVisible(false)}>\n      <Radio.Group onChange={onStyleUrlChange} value={mapboxStyleURL}>\n        <Radio value={MAPBOX_STYLE_URL.road}>Roads</Radio>\n        <Radio value={MAPBOX_STYLE_URL.administrative}>Administrative boundaries</Radio>\n      </Radio.Group>\n    </AntDrawer>\n  )\n}\n\nexport default Drawer\n","import React, { useState, useRef, useEffect } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport { Button } from 'antd'\nimport { RightCircleFilled } from '@ant-design/icons'\nimport Drawer from './Drawer'\nimport { Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\n// eslint-disable-next-line\nimport PaintWorker from 'worker-loader!./paint.worker'\n\nimport './style.css'\n\n// eslint-disable-next-line\nconst token: string = process.env['REACT_APP_MAPBOX_TOKEN'] || ''\nmapboxgl.accessToken = token\n\nexport const MAPBOX_STYLE_URL = {\n  administrative: 'mapbox://styles/cartapuce/ck8vkvxjt27z71ila3b3jecka',\n  road: 'mapbox://styles/cartapuce/ck8vk01zo2e5w1ipmytroxgf4',\n  // regular: 'mapbox://styles/mapbox/streets-v11',\n}\n\nconst styles = {\n  width: '100vw',\n  height: 'calc(100vh)',\n  position: 'absolute',\n} as React.CSSProperties\n\nexport type RGBColor = { r: number; g: number; b: number }\nexport type imagePoint = { x: number; y: number }\n\nlet paintWorker = new PaintWorker()\n\nconst showMapboxCanvas = (isMapbox: boolean): void => {\n  const mapboxElement = document.getElementById('mapbox-cvs') as HTMLCanvasElement\n  const mosaicElement = document.getElementById('maposaic-cvs') as HTMLCanvasElement\n  mapboxElement.style.opacity = isMapbox ? '1' : '0'\n  mosaicElement.style.opacity = isMapbox ? '0' : '1'\n}\n\nconst MapboxGLMap = (): JSX.Element => {\n  const [map, setMap] = useState<mapboxgl.Map | null>(null)\n  const mapContainer = useRef<HTMLDivElement | null>(null)\n  const [mapboxStyleURL, setMapboxStyleURL] = useState(MAPBOX_STYLE_URL.road)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const paintMosaic = async (map: mapboxgl.Map): Promise<void> => {\n    setIsLoading(true)\n    showMapboxCanvas(true)\n    const mapboxCanvas = map.getCanvas()\n    const gl = mapboxCanvas.getContext('webgl')\n    if (!gl) {\n      console.log('pas de gl')\n      return\n    }\n    const webglWidth = gl.drawingBufferWidth\n    const webglHeight = gl.drawingBufferHeight\n    const viewportWidth = webglWidth\n    const viewportHeight = webglHeight\n\n    const maposaicCanvas = document.getElementById('maposaic-cvs') as HTMLCanvasElement\n    maposaicCanvas.setAttribute('width', viewportWidth.toString())\n    maposaicCanvas.setAttribute('height', viewportHeight.toString())\n    const maposaicContext = maposaicCanvas.getContext('2d')\n    if (!maposaicContext) {\n      return\n    }\n    const imageData = maposaicContext.getImageData(0, 0, maposaicCanvas.width, maposaicCanvas.height)\n    const maposaicData = imageData.data\n\n    const mapboxPixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4)\n    gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, mapboxPixels)\n\n    paintWorker.onmessage = function (e): void {\n      imageData.data.set(e.data)\n      maposaicContext.putImageData(imageData, 0, 0)\n      showMapboxCanvas(false)\n      setIsLoading(false)\n    }\n    paintWorker.postMessage({ mapboxPixels, maposaicData, webglWidth, webglHeight, viewportHeight, viewportWidth })\n  }\n\n  useEffect(() => {\n    const newMap = new mapboxgl.Map({\n      container: mapContainer.current ? mapContainer.current : '',\n      style: mapboxStyleURL,\n      zoom: 12,\n      center: {\n        lng: 2.338272,\n        lat: 48.858796,\n      },\n    })\n    newMap.on('load', () => {\n      setMap(newMap)\n      newMap.resize()\n    })\n    newMap.on('dragstart', showMapboxCanvas)\n    newMap.on('zoomstart', showMapboxCanvas)\n    newMap.on('render', () => {\n      if (!newMap.loaded() || newMap.isMoving() || newMap.isZooming()) {\n        return\n      }\n      paintWorker.terminate()\n      paintWorker = new PaintWorker()\n      paintMosaic(newMap)\n    })\n  }, [])\n\n  const [hasChangedStyle, setHasChangedStyle] = useState(false)\n  const [drawerVisible, setDrawerVisible] = useState(false)\n\n  useEffect(() => {\n    if (map && hasChangedStyle) {\n      map.setStyle(mapboxStyleURL)\n      setHasChangedStyle(false)\n    }\n  }, [mapboxStyleURL, map, hasChangedStyle])\n\n  const changeMapStyle = (newStyle: string) => {\n    if (mapboxStyleURL !== newStyle) {\n      setIsLoading(true)\n      setMapboxStyleURL(newStyle)\n      setHasChangedStyle(true)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <canvas className=\"mosaic-canvas\" width=\"300\" height=\"300\" id=\"maposaic-cvs\" />\n      <div id=\"mapbox-cvs\" className=\"mapbox-canvas\" ref={(el) => (mapContainer.current = el)} style={styles} />\n      <Spin spinning={isLoading} indicator={<LoadingOutlined />} />\n      <div className=\"overmap\">\n        <Drawer\n          visible={drawerVisible}\n          setDrawerVisible={setDrawerVisible}\n          changeMapStyle={changeMapStyle}\n          mapboxStyleURL={mapboxStyleURL}\n        />\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          onClick={() => {\n            setDrawerVisible(true)\n          }}\n          icon={<RightCircleFilled />}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default MapboxGLMap\n","import React from 'react'\nimport Mapozaic from './Mapozaic/Mapozaic'\n\nfunction App() {\n  return <Mapozaic />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f66370dd5c371c34f70c.worker.js\");\n};"],"sourceRoot":""}