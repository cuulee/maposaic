{"version":3,"sources":["constants/ux.ts","CloudUpload/CloudUpload.tsx","firebaseService/services.ts","constants/dimensions.ts","assets/dice.svg","assets/gps.svg","Colors/utils.tsx","Colors/ColorConfigSettings.tsx","Colors/ColorConfigChoice.tsx","Maposaic/constants.ts","Drawer/Drawer.tsx","Maposaic/paint.worker.ts","types/geo.ts","Maposaic/elementHelpers.ts","constants/mapbox.ts","Geo/constants.ts","Geo/utils.ts","PlaceName/PlaceName.tsx","Geo/GeoSearchInput.tsx","Maposaic/Maposaic.tsx","Colors/mapbox.ts","Canvas/utils.tsx"],"names":["TOOLTIP_ENTER_DELAY","UploadStatus","PICTURE_COLLECTION_ID","PICTURE_BASE_PATH","getPicturePathFromFileId","id","postOrUpdatePicturesDocument","a","documentId","payload","anonymousUid","sanethizedPayload","sanethizePayload","db","collection","doc","update","add","timestamp","firebase","firestore","FieldValue","serverTimestamp","response","console","log","res","Object","keys","forEach","key","value","undefined","ProgressStatus","Error","Canceled","Running","Success","StatusMessage","taskState","history","useHistory","className","onClick","push","PICTURE_ID_PARAM","UploadButton","isDisabled","onUploadClick","title","mouseEnterDelay","disabled","type","shape","icon","CloudUploadOutlined","CloudUpload","mapCenter","mapZoom","placeName","colorConfig","mapboxStyle","useState","modalVisible","setModalVisible","progress","setProgress","setTaskState","uploadTask","setUploadTask","pictureName","setPictureName","fileId","setFileId","isFormUploaded","setIsFormUploaded","isUploadingForm","setIsUploadingForm","pictureDocumentId","setPictureDocumentId","setAnonymousUid","useEffect","firebaseAuth","signInAnonymously","auth","onAuthStateChanged","user","uid","onError","error","code","onComplete","downloadURL","filePath","toArray","updateDocumentId","memoizedOnComplete","useCallback","unsubscribe","on","snapshot","bytesTransferred","totalBytes","onSnapshot","ref","getDownloadURL","cancelUpload","storage","TaskState","RUNNING","PAUSED","includes","cancel","isFormSubmitDisabled","length","submitForm","newDocumentId","InputSuffix","LoadingOutlined","spin","style","color","PRIMARY_COLOR","CheckCircleTwoTone","twoToneColor","SUCCESS_COLOR","SendOutlined","DISABLED_COLOR","mosaicElement","document","getElementById","toBlob","blob","uuid","uuidv4","firebaseStorage","put","uploadBlob","visible","onCancel","onOk","Fragment","percent","Math","round","size","status","placeholder","onChange","e","target","suffix","onPressEnter","Format","createRGB","r","g","b","hexToRgb","hex","parseInt","slice","HEXA","intToHex","int","floor","rgbToHex","rgb","createColor","colors","ColorConfigType","Random","random","getMaposaicColorsFromColorConfig","Shading","shadingType","ShadingType","Custom","generate","seedColor","AntColors","paletteType","PaletteType","Preset","PRESET_PALETTES","origin","palettes","paletteIndex","createMaposaicColors","specificColorTransforms","mainColors","specificColors","Set","specificColor","has","getMaposaicColorsWithoutSpecific","getInitialPresetPaletteIndex","Palette","ColorConfigSettings","setColorConfig","shadingColorConfig","setShadingColorConfig","setPaletteColorConfig","paletteColorConfig","customShadingColor","setCustomShadingColor","PaletteOrigin","Coolors","paletteOrigin","setPaletteOrigin","ColorHunt","presetPaletteIndex","setPresetPaletteIndex","customPaletteColors","setCustomPaletteColors","changeColorConfig","config","setCustomShadingConfig","onCustomPalettePickerChange","index","newPalette","toLocaleLowerCase","entries","ShadingPresetName","map","name","presetName","backgroundColor","primary","content","c","onChangeComplete","disableAlpha","placement","Group","Array","from","fontSize","_","i","Option","onCustomPalettePickerChangeComplete","palette","dropdownStyle","display","alignItems","hexColor","ColorConfigChoice","setNewSpecificColorTransforms","DEFAULT_SHADING_CONFIG","DEFAULT_PALETTE_CONFIG","specificColorPicks","setSpecificColorPicks","newPicks","colorKey","transform","onSpecificColorPickerChange","newSpecificColorPicks","ColorConfigNamesAndImage","configName","configType","RANDOM_CONFIG","width","alt","src","imgPath","level","checked","newColorTransform","onColorTransformChange","onSpecificColorPickerChangeComplete","FORMAT_RATIO","FORMAT_SIZE","A4","A3","A2","A1","A0","FORMATS","MAPBOX_STYLES","MapboxStyle","Relief","url","Road","Water","millisecondsToText","millis","min","ms","s","ds","radioStyle","justifyContent","Drawer","setDrawerVisible","changeMapStyle","sizeFactor","setNewSizeFactor","remainingTime","estimatedTime","updateEstimatedTime","onPosterSizeChange","localSizeFactor","setLocalSizeFactor","isLandscape","setIsLandscape","format","setFormat","onClose","closable","values","onSelect","pixelPerInchResolution","longerPropertyCMLength","Button","height","marginLeft","InfoCircleOutlined","max","step","FormatPainterOutlined","count","ClockCircleOutlined","Worker_fn","Worker","PlaceType","toggleCanvasOpacity","isMapbox","mapboxElement","mosaicCanvas","opacity","MAPBOX_TOKEN","process","GEOCODING_BASE_URL","PLACE_TYPE_RELEVANCE","Place","Locality","Postcode","District","Region","Country","Neighborhood","getPlaceNameFromPosition","center","fetch","lng","lat","geoResponse","json","geoCoding","nextRelevantPlaceType","features","feature","place_type","place_name","fetchGeoRandom","data","mapboxgl","LngLat","geodata","nearest","longt","latt","getRandomZoom","PlaceName","showPlaceNameTrigger","isTextDisplayed","setIsTextDisplayed","isFirstRender","setIsFirstRender","showPlaceNameTriggerRef","useRef","current","setTimeout","onCompassClick","CompassOutlined","GeoSearch","flyTo","currentCenter","searchText","setSearchText","options","setOptions","isSearching","setIsSearching","handleSearch","proximity","request","body","optionChildren","option","split","address","rest","label","fontWeight","join","onSearch","targetOption","find","borderRadius","SearchOutlined","React","lazy","accessToken","mapboxResolutionRatio","paintWorker","PaintWorker","getMapboxPixelCount","gl","getCanvas","getContext","drawingBufferWidth","drawingBufferHeight","computeTime","pixelCount","milliseconds","lastStartDate","Date","MapboxGLMap","isWasmAvailable","setIsWasmAvailable","isInitialUrlParamsParsed","setIsInitialUrlParamsParsed","setMap","mapboxContainer","drawerVisible","setEstimatedTime","setRemainingTime","setMapboxStyle","isLoading","setIsLoading","setCurrentCenter","setPlaceName","sizeRender","setSizeRender","setSizeFactor","initialCenter","setInitialCenter","initialZoom","setInitialZoom","setShowPlaceNameTrigger","showPlaceNameWhenFetched","setShowPlaceNameWhenFetched","ROAD_WHITE","isEditable","setSpecificColorTransforms","urlParams","getURLParamsFromCoords","getZoom","URLSearchParams","window","location","search","replaceState","pathname","useCheckWasmAvailability","getURLParamsFromColorConfig","set","MAPOSAIC_STYLE_URL_PARAM_KEY","setRandomCoords","setZoom","randomCenter","setCenter","get","MaposaicGeoURLParamKey","Lat","Lng","zoom","Zoom","parseFloat","getColorConfigFromURLParams","paintMosaic","newMap","mapboxWrapper","maposaicCanvas","sourceSize","canvassRatio","mapboxCanvasSize","w","h","maposaicCanvasSize","ceil","offsetWidth","setAttribute","toString","maposaicContext","imageData","getImageData","maposaicData","mapboxPixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","postMessage","sourcePixelArray","targetPixelArray","targetSize","maposaicColors","onmessage","pixels","paintedBoundsMin","putImageData","duration","getTime","getCenter","offsetHeight","setMapboxArtificialSize","Map","container","maxTileCacheSize","mapboxCanvas","getElementsByClassName","setMapboxDisplaySize","loaded","isMoving","isZooming","terminate","remove","interval","setInterval","clearInterval","onCurrentCenterChange","el","spinning","indicator","spinner","newStyle","colorTransforms","pendingSizeFactor","pow","rootWrapper","mapsContainerSize","longerProperty","smallerProperty","resizeMapsContainer","target1DPixelCount","current1DPixelCount","SettingOutlined","link","createElement","download","href","URL","createObjectURL","click","CloudDownloadOutlined","fallback","PictureOutlined","dice","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","gps"],"mappings":"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","file":"static/js/7.24eab433.chunk.js","sourcesContent":["export const TOOLTIP_ENTER_DELAY = 0.4\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Input, Modal, Progress, Tooltip } from 'antd'\nimport { CheckCircleTwoTone, CloudUploadOutlined, LoadingOutlined, SendOutlined } from '@ant-design/icons'\nimport { ProgressProps } from 'antd/lib/progress'\nimport firebase from 'firebase/app'\nimport { firebaseAuth } from 'firebaseService/initialize'\nimport { getPicturePathFromFileId, postOrUpdatePicturesDocument, uploadBlob } from 'firebaseService/services'\n\nimport { DISABLED_COLOR, PRIMARY_COLOR, SUCCESS_COLOR } from 'constants/colors'\nimport 'CloudUpload/style.less'\nimport { TOOLTIP_ENTER_DELAY } from 'constants/ux'\nimport { useHistory } from 'react-router-dom'\nimport { PICTURE_ID_PARAM } from 'Gallery/constants'\nimport { ColorConfig } from 'Colors/types'\nimport { MapboxStyle } from 'Maposaic/types'\n\nenum UploadStatus {\n  Error = 'error',\n  Canceled = 'canceled',\n  Running = 'running',\n  Success = 'success',\n}\n\nexport type TaskState = UploadStatus | null\n\nconst ProgressStatus: { [key in UploadStatus]: ProgressProps['status'] } = {\n  [UploadStatus.Error]: 'exception',\n  [UploadStatus.Canceled]: 'exception',\n  [UploadStatus.Running]: 'active',\n  [UploadStatus.Success]: 'success',\n}\n\nconst StatusMessage = ({ taskState, documentId }: { taskState: TaskState; documentId: string | null }) => {\n  const history = useHistory()\n  if (!taskState) {\n    return <div>No upload in progress</div>\n  }\n  if (taskState === UploadStatus.Canceled) {\n    return <div>Upload canceled</div>\n  }\n  if (taskState === UploadStatus.Running) {\n    return <div>Uploading picture...</div>\n  }\n  if (taskState === UploadStatus.Error || !documentId) {\n    return <div>Upload failed</div>\n  }\n  if (taskState === UploadStatus.Success) {\n    return (\n      <div className=\"status-message\">\n        Picture uploaded !{' '}\n        <div\n          className=\"status-message__link\"\n          onClick={() => history.push(`/gallery?${PICTURE_ID_PARAM}=${documentId}`)}\n        >\n          show in gallery\n        </div>\n      </div>\n    )\n  }\n  return <div>Upload failed</div>\n}\n\nexport const UploadButton = ({ isDisabled, onUploadClick }: { isDisabled: boolean; onUploadClick?: () => void }) => {\n  return (\n    <Tooltip title=\"Upload to public gallery\" mouseEnterDelay={TOOLTIP_ENTER_DELAY}>\n      <Button\n        disabled={isDisabled}\n        type=\"default\"\n        shape=\"circle\"\n        onClick={onUploadClick}\n        icon={<CloudUploadOutlined />}\n      />\n    </Tooltip>\n  )\n}\n\nconst CloudUpload = ({\n  isDisabled,\n  className,\n  mapCenter,\n  mapZoom,\n  placeName,\n  colorConfig,\n  mapboxStyle,\n}: {\n  isDisabled: boolean\n  className?: string\n  mapCenter?: mapboxgl.LngLat\n  mapZoom?: number\n  placeName: string | null\n  colorConfig: ColorConfig\n  mapboxStyle: MapboxStyle\n}) => {\n  const [modalVisible, setModalVisible] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [taskState, setTaskState] = useState<TaskState>(null)\n  const [uploadTask, setUploadTask] = useState<null | firebase.storage.UploadTask>(null)\n  const [pictureName, setPictureName] = useState('')\n  const [fileId, setFileId] = useState<null | string>(null)\n  const [isFormUploaded, setIsFormUploaded] = useState(false)\n  const [isUploadingForm, setIsUploadingForm] = useState(false)\n  const [pictureDocumentId, setPictureDocumentId] = useState<string | null>(null)\n  const [anonymousUid, setAnonymousUid] = useState<string | null>(null)\n\n  useEffect(() => {\n    firebaseAuth.signInAnonymously()\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setAnonymousUid(user.uid)\n      } else {\n        setAnonymousUid(null)\n      }\n    })\n  }, [])\n\n  const onUploadClick = () => {\n    setModalVisible(true)\n    if (taskState === UploadStatus.Running) {\n      return\n    }\n    setTaskState(null)\n    setUploadTask(null)\n    setPictureDocumentId(null)\n    setPictureName(placeName ?? '')\n\n    const mosaicElement = document.getElementById('maposaic-canvas') as HTMLCanvasElement | null\n    if (!mosaicElement) {\n      return\n    }\n    setProgress(0)\n    mosaicElement.toBlob((blob) => {\n      if (!blob) {\n        return\n      }\n      const { uploadTask, fileId } = uploadBlob({ blob })\n      setUploadTask(uploadTask)\n      setFileId(fileId)\n    })\n  }\n\n  const onError = (error?: firebase.storage.FirebaseStorageError) => {\n    if (error && error.code === 'storage/canceled') {\n      setTaskState(UploadStatus.Canceled)\n    }\n    setTaskState(UploadStatus.Error)\n  }\n\n  const onComplete = async ({ downloadURL, fileId }: { downloadURL: string; fileId: string }) => {\n    const documentId = await postOrUpdatePicturesDocument({\n      documentId: pictureDocumentId,\n      anonymousUid,\n      payload: {\n        downloadURL,\n        filePath: getPicturePathFromFileId(fileId),\n        mapCenter: mapCenter?.toArray() ?? '',\n        colorConfig,\n        mapZoom,\n        placeName,\n        mapboxStyle,\n      },\n    })\n    updateDocumentId(documentId)\n    if (documentId) {\n      setTaskState(UploadStatus.Success)\n    } else {\n      setTaskState(UploadStatus.Error)\n    }\n  }\n  const memoizedOnComplete = useCallback(onComplete, [pictureDocumentId, anonymousUid])\n\n  const onSnapshot = (snapshot: firebase.storage.UploadTaskSnapshot) => {\n    setProgress((snapshot.bytesTransferred / snapshot.totalBytes) * 100)\n    setTaskState(UploadStatus.Running)\n  }\n\n  useEffect(() => {\n    if (!uploadTask || !fileId) {\n      return\n    }\n    const unsubscribe = uploadTask.on(\n      'state_changed',\n      (snapshot) => {\n        onSnapshot(snapshot)\n      },\n      (error) => {\n        onError(error)\n      },\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async () => {\n        try {\n          const downloadURL = (await uploadTask.snapshot.ref.getDownloadURL()) as string\n          void memoizedOnComplete({ downloadURL, fileId })\n        } catch (e) {\n          onError()\n        }\n      },\n    ) as () => void\n    return () => unsubscribe()\n  }, [uploadTask, memoizedOnComplete, fileId])\n\n  const onModalOk = () => {\n    if (!isFormSubmitDisabled && !isFormUploaded) {\n      submitForm()\n    }\n    setModalVisible(false)\n  }\n\n  const onModalCancel = () => {\n    cancelUpload()\n    setModalVisible(false)\n  }\n\n  const cancelUpload = () => {\n    if (\n      taskState &&\n      [firebase.storage.TaskState.RUNNING, firebase.storage.TaskState.PAUSED].includes(taskState) &&\n      uploadTask\n    ) {\n      uploadTask.cancel()\n      setTaskState(UploadStatus.Canceled)\n    }\n  }\n\n  useEffect(() => setIsFormUploaded(false), [pictureName])\n\n  const isFormSubmitDisabled =\n    !pictureName.length ||\n    !taskState ||\n    ![UploadStatus.Running, UploadStatus.Success].includes(taskState) ||\n    isFormUploaded\n\n  const submitForm = async () => {\n    if (isFormSubmitDisabled) {\n      return\n    }\n    setIsUploadingForm(true)\n    const documentId = await postOrUpdatePicturesDocument({\n      documentId: pictureDocumentId,\n      payload: { pictureName },\n      anonymousUid,\n    })\n    updateDocumentId(documentId)\n    setIsUploadingForm(false)\n    setIsFormUploaded(true)\n  }\n\n  const updateDocumentId = (newDocumentId: string | null) => {\n    if (!newDocumentId || pictureDocumentId) {\n      return\n    }\n    setPictureDocumentId(newDocumentId)\n  }\n\n  const InputSuffix = ({ className }: { className?: string }) => {\n    if (isUploadingForm) {\n      return <LoadingOutlined spin className={className} style={{ color: PRIMARY_COLOR }} />\n    }\n    if (isFormUploaded) {\n      return <CheckCircleTwoTone className={className} twoToneColor={SUCCESS_COLOR} />\n    }\n    return (\n      <SendOutlined\n        className={className}\n        onClick={isFormSubmitDisabled ? undefined : submitForm}\n        style={{ color: isFormSubmitDisabled ? DISABLED_COLOR : PRIMARY_COLOR }}\n      />\n    )\n  }\n\n  return (\n    <div className={className}>\n      <UploadButton isDisabled={isDisabled} onUploadClick={onUploadClick} />\n      <Modal visible={modalVisible} onCancel={onModalCancel} onOk={onModalOk}>\n        <StatusMessage documentId={pictureDocumentId} taskState={taskState} />\n        {taskState && (\n          <React.Fragment>\n            <Progress\n              percent={Math.round(progress)}\n              size=\"small\"\n              status={taskState ? ProgressStatus[taskState] : undefined}\n            />\n          </React.Fragment>\n        )}\n        <div className=\"form\">\n          <div className=\"form__title\">Picture name (optional)</div>\n          <div className=\"form__field\">\n            <Input\n              placeholder=\"Picture name\"\n              value={pictureName}\n              onChange={(e) => setPictureName(e.target.value)}\n              suffix={<InputSuffix />}\n              onPressEnter={submitForm}\n            />\n          </div>\n        </div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default CloudUpload\n","import { db, firebaseStorage } from 'firebaseService/initialize'\nimport firebase from 'firebase/app'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst PICTURE_COLLECTION_ID = 'pictures'\n\nexport const PICTURE_BASE_PATH = 'maposaic_pictures'\nexport const THUMBNAILS_PATH = 'thumbnails'\n\nexport const getPicturePathFromFileId = (id: string) => {\n  return `${PICTURE_BASE_PATH}/${id}`\n}\nexport const getThumbnailPathFromFileId = (id: string) => {\n  return `${PICTURE_BASE_PATH}/${THUMBNAILS_PATH}/${id}_250x250`\n}\n\nexport const uploadBlob = ({ blob }: { blob: Blob }) => {\n  const uuid = uuidv4()\n  const filePath = getPicturePathFromFileId(uuid)\n  const storageRef = firebaseStorage.ref(filePath)\n  const uploadTask = storageRef.put(blob)\n\n  return { fileId: uuid, uploadTask }\n}\n\nexport const postOrUpdatePicturesDocument = async ({\n  documentId,\n  payload,\n  anonymousUid,\n}: {\n  documentId: string | null\n  payload: Record<string, any>\n  anonymousUid: string | null\n}) => {\n  // undefined value in payload is not accepted by firestore\n  const sanethizedPayload = sanethizePayload(payload)\n\n  if (documentId) {\n    const docRef = db.collection(PICTURE_COLLECTION_ID).doc(documentId)\n    docRef.update(sanethizedPayload)\n\n    return documentId\n  }\n\n  try {\n    const response = await db\n      .collection(PICTURE_COLLECTION_ID)\n      .add({ ...sanethizedPayload, anonymousUid, timestamp: firebase.firestore.FieldValue.serverTimestamp() })\n    return response.id\n  } catch (e) {\n    console.log(e)\n    return null\n  }\n}\n\nconst sanethizePayload = (payload: Record<string, any>) => {\n  const res: Record<string, any> = {}\n  Object.keys(payload).forEach((key) => {\n    // eslint-disable-next-line\n    // @ts-ignore\n    // eslint-disable-next-line\n    const value = payload[key]\n    if (value !== undefined) {\n      // eslint-disable-next-line\n      res[key] = value\n    }\n  })\n\n  return res\n}\n","export const CM_PER_INCH = 2.54\nexport const FORMAT_RATIO = 29.7 / 21\n\nexport enum Format {\n  A4 = 'A4',\n  A3 = 'A3',\n  A2 = 'A2',\n  A1 = 'A1',\n  A0 = 'A0',\n}\n\nexport const FORMAT_SIZE = {\n  [Format.A4]: 29.7,\n  [Format.A3]: 42,\n  [Format.A2]: 59.4,\n  [Format.A1]: 84.1,\n  [Format.A0]: 118.9,\n}\n\nexport const FORMATS = [Format.A4, Format.A3, Format.A2, Format.A1, Format.A0]\n","export default __webpack_public_path__ + \"static/media/dice.f791ca4f.svg\";","export default __webpack_public_path__ + \"static/media/gps.fb5bd49f.svg\";","import {\n  ColorConfig,\n  ColorConfigType,\n  ColorSettings,\n  MaposaicColors,\n  PaletteOrigin,\n  PaletteType,\n  RGBColor,\n  ShadingType,\n} from 'Colors/types'\nimport { SpecificColorTransforms } from 'Maposaic/types'\nimport { generate } from '@ant-design/colors'\nimport { AntColors, PRESET_PALETTES } from 'Colors/constants'\n\nexport const createRGB = (r: number, g: number, b: number): RGBColor => {\n  return { r, g, b }\n}\n\nconst hexToRgb = (hex: string) => {\n  return createRGB(parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16))\n}\n\nconst hexToU32 = (hex: string) => {\n  return parseInt(hex.slice(1, 3), 16) * 256 * 256 + parseInt(hex.slice(3, 5), 16) * 256 + parseInt(hex.slice(5, 7), 16)\n}\n\nconst HEXA = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\nconst intToHex = (int: number) => {\n  return `${HEXA[Math.floor(int / 16)] || 0}${HEXA[int % 16] || 0}`\n}\n\nexport const rgbToHex = (rgb: RGBColor) => {\n  return `#${intToHex(rgb.r)}${intToHex(rgb.g)}${intToHex(rgb.b)}`\n}\n\nexport const createColor = (colors: MaposaicColors | string) => {\n  if (colors === ColorConfigType.Random) {\n    return createRGB(Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256))\n  }\n  if (typeof colors === 'string') {\n    return hexToRgb(colors)\n  }\n  return hexToRgb(colors[Math.floor(Math.random() * colors.length)])\n}\n\nexport const transformInitialColor = (\n  initialColor: RGBColor,\n  mainColor: MaposaicColors,\n  specificColorTransforms: SpecificColorTransforms,\n) => {\n  const initialColorHex = rgbToHex(initialColor)\n  if (initialColorHex in specificColorTransforms) {\n    const specificColor = specificColorTransforms[initialColorHex].color\n    if (specificColor) {\n      return createColor(specificColor)\n    }\n  }\n\n  return createColor(mainColor)\n}\n\nexport const isColorSimilar = (color1: RGBColor, color2: RGBColor, similarColorTolerance: number): boolean => {\n  return (\n    Math.abs(color1.r - color2.r) < similarColorTolerance &&\n    Math.abs(color1.g - color2.g) < similarColorTolerance &&\n    Math.abs(color1.b - color2.b) < similarColorTolerance\n  )\n}\n\nexport const getMaposaicColorsWithoutSpecific = (\n  mainColors: MaposaicColors,\n  specificColorTransforms: SpecificColorTransforms,\n) => {\n  if (typeof mainColors !== 'object') {\n    return mainColors\n  }\n  const specificColors = new Set()\n  for (const specificColor in specificColorTransforms) {\n    if (specificColorTransforms[specificColor].color) {\n      specificColors.add(specificColorTransforms[specificColor].color)\n    }\n  }\n\n  const colors = []\n\n  for (const color of mainColors) {\n    if (!specificColors.has(color)) {\n      colors.push(color)\n    }\n  }\n\n  return colors\n}\n\nexport const getMaposaicColorsFromColorConfig = (colorConfig: ColorConfig) => {\n  if (colorConfig.type === ColorConfigType.Random) {\n    return ColorConfigType.Random\n  }\n  if (colorConfig.type === ColorConfigType.Shading) {\n    if (colorConfig.shadingType === ShadingType.Custom) {\n      return generate(colorConfig.seedColor)\n    } else {\n      return AntColors[colorConfig.seedColor]\n    }\n  }\n  if (colorConfig.paletteType === PaletteType.Preset) {\n    return PRESET_PALETTES[colorConfig.origin].palettes[colorConfig.paletteIndex]\n  }\n\n  return colorConfig.colors\n}\n\nexport const createMaposaicColors = (colorConfig: ColorConfig, specificColorTransforms: SpecificColorTransforms) => {\n  return getMaposaicColorsWithoutSpecific(getMaposaicColorsFromColorConfig(colorConfig), specificColorTransforms)\n}\n\nexport const getInitialPresetPaletteIndex = (colorConfig: ColorConfig, origin: PaletteOrigin) => {\n  return colorConfig.type === ColorConfigType.Palette &&\n    colorConfig.paletteType === PaletteType.Preset &&\n    colorConfig.origin === origin\n    ? colorConfig.paletteIndex\n    : 0\n}\n\nexport const createColorSettings = (\n  mainColors: MaposaicColors,\n  specificColorTransforms: SpecificColorTransforms,\n): ColorSettings => {\n  const specific_transforms: Record<number, number> = {}\n  for (const [colorHex, transform] of Object.entries(specificColorTransforms)) {\n    if (transform.color) {\n      specific_transforms[hexToU32(colorHex)] = hexToU32(transform.color ?? '#000000')\n    }\n  }\n  return {\n    is_random: mainColors === ColorConfigType.Random,\n    specific_transforms,\n    available_colors: mainColors === ColorConfigType.Random ? [] : mainColors.map(hexToU32),\n  }\n}\n","import React, { useState } from 'react'\nimport Radio, { RadioChangeEvent } from 'antd/lib/radio'\nimport { ChromePicker, ColorResult } from 'react-color'\n\nimport { AntColors, PRESET_PALETTES } from 'Colors/constants'\nimport {\n  ColorConfig,\n  ColorConfigType,\n  HexColor,\n  PaletteColorConfig,\n  PaletteOrigin,\n  PaletteType,\n  ShadingColorConfig,\n  ShadingPresetName,\n  ShadingType,\n} from 'Colors/types'\nimport 'Colors/colorConfigSettings.style.less'\nimport { Popover, Select } from 'antd'\nimport { getInitialPresetPaletteIndex } from 'Colors/utils'\n\n/* eslint-disable complexity */\nconst ColorConfigSettings = ({\n  colorConfig,\n  setColorConfig,\n  shadingColorConfig,\n  setShadingColorConfig,\n  paletteColorConfig,\n  setPaletteColorConfig,\n}: {\n  colorConfig: ColorConfig\n  setColorConfig: (config: ColorConfig) => void\n  shadingColorConfig: ShadingColorConfig\n  setShadingColorConfig: (shadingColorConfig: ShadingColorConfig) => void\n  paletteColorConfig: PaletteColorConfig\n  setPaletteColorConfig: (paletteColorConfig: PaletteColorConfig) => void\n}) => {\n  const [customShadingColor, setCustomShadingColor] = useState<HexColor>(\n    colorConfig.type === ColorConfigType.Shading && colorConfig.shadingType === ShadingType.Custom\n      ? colorConfig.seedColor\n      : '#3c22c3',\n  )\n  const [paletteOrigin, setPaletteOrigin] = useState<PaletteOrigin | PaletteType.Custom>(\n    colorConfig.type === ColorConfigType.Palette\n      ? colorConfig.paletteType === PaletteType.Preset\n        ? colorConfig.origin\n        : PaletteType.Custom\n      : PaletteOrigin.Coolors,\n  )\n  const [presetPaletteIndex, setPresetPaletteIndex] = useState({\n    [PaletteOrigin.Coolors]: getInitialPresetPaletteIndex(colorConfig, PaletteOrigin.Coolors),\n    [PaletteOrigin.ColorHunt]: getInitialPresetPaletteIndex(colorConfig, PaletteOrigin.ColorHunt),\n  })\n  const [customPaletteColors, setCustomPaletteColors] = useState<string[]>(\n    colorConfig.type === ColorConfigType.Palette && colorConfig.paletteType === PaletteType.Custom\n      ? colorConfig.colors\n      : ['#f3d2a6', '#13dff6'],\n  )\n\n  const changeColorConfig = (config: ColorConfig) => {\n    if (config.type === ColorConfigType.Shading) {\n      setShadingColorConfig(config)\n    } else if (config.type === ColorConfigType.Palette) {\n      setPaletteColorConfig(config)\n    }\n    setColorConfig(config)\n  }\n\n  const changePresetColor = (presetName: ShadingPresetName) => {\n    changeColorConfig({ ...shadingColorConfig, shadingType: ShadingType.Preset, seedColor: presetName })\n  }\n\n  const setCustomShadingConfig = (color: HexColor) => {\n    setCustomShadingColor(color)\n    changeColorConfig({\n      ...shadingColorConfig,\n      shadingType: ShadingType.Custom,\n      seedColor: color,\n    })\n  }\n  const changePaletteOrigin = (e: RadioChangeEvent) => {\n    const origin = e.target.value as PaletteOrigin | PaletteType.Custom\n    setPaletteOrigin(origin)\n    if (origin === PaletteType.Custom) {\n      changeColorConfig({\n        type: ColorConfigType.Palette,\n        paletteType: PaletteType.Custom,\n        colors: customPaletteColors,\n      })\n    } else {\n      changeColorConfig({\n        type: ColorConfigType.Palette,\n        paletteType: PaletteType.Preset,\n        origin,\n        paletteIndex: presetPaletteIndex[origin],\n      })\n    }\n  }\n  const changePresetPaletteIndex = (index: number) => {\n    if (paletteOrigin === PaletteType.Custom) {\n      return\n    }\n    const paletteIndex = { ...presetPaletteIndex }\n    paletteIndex[paletteOrigin] = index\n    setPresetPaletteIndex(paletteIndex)\n    changeColorConfig({\n      type: ColorConfigType.Palette,\n      paletteType: PaletteType.Preset,\n      origin: paletteOrigin,\n      paletteIndex: index,\n    })\n  }\n\n  const onCustomPalettePickerChange = (color: ColorResult, index: number) => {\n    const newPalette = [...customPaletteColors]\n    newPalette[index] = color.hex.toLocaleLowerCase()\n    setCustomPaletteColors(newPalette)\n    return newPalette\n  }\n\n  const onCustomPalettePickerChangeComplete = (color: ColorResult, index: number) => {\n    const newPalette = onCustomPalettePickerChange(color, index)\n    changeColorConfig({ type: ColorConfigType.Palette, paletteType: PaletteType.Custom, colors: newPalette })\n  }\n\n  const onPaletteSizeChange = (value: number | undefined) => {\n    if (!value) {\n      return\n    }\n    const newPalette = [\n      ...customPaletteColors.slice(0, value),\n      ...Array.from(\n        { length: value - customPaletteColors.length },\n        () => customPaletteColors[customPaletteColors.length - 1] || '#aaaaaa',\n      ),\n    ]\n    setCustomPaletteColors(newPalette)\n    changeColorConfig({ type: ColorConfigType.Palette, paletteType: PaletteType.Custom, colors: newPalette })\n  }\n\n  if (colorConfig.type === ColorConfigType.Shading) {\n    return (\n      <div className=\"settings\">\n        <div className=\"shading-settings__type\">\n          <div className=\"shading-settings__type__name\">Preset</div>\n          <div className=\"shading-settings__type__presets\">\n            {Object.entries(ShadingPresetName).map(([name, color]) => {\n              return (\n                <div\n                  className={`shading-color${\n                    shadingColorConfig.shadingType === ShadingType.Preset && shadingColorConfig.seedColor === color\n                      ? ' shading-color--selected'\n                      : ''\n                  }`}\n                  key={name}\n                  onClick={() => changePresetColor(color)}\n                >\n                  <div className=\"shading-color__fill\" style={{ backgroundColor: AntColors[color].primary }} />\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <div className=\"shading-settings__type\">\n          <div className=\"shading-settings__type__name\">Custom</div>\n          <div className=\"shading-settings__type__custom\">\n            <div\n              className={`shading-color${\n                shadingColorConfig.shadingType === ShadingType.Custom ? ' shading-color--selected' : ''\n              }`}\n              onClick={() => setCustomShadingConfig(customShadingColor)}\n            >\n              <Popover\n                content={\n                  <ChromePicker\n                    color={customShadingColor}\n                    onChange={(c) => setCustomShadingColor(c.hex)}\n                    onChangeComplete={(color) => setCustomShadingConfig(color.hex.toLocaleLowerCase())}\n                    disableAlpha\n                  />\n                }\n                placement=\"bottom\"\n              >\n                <div className=\"shading-color__fill\" style={{ backgroundColor: customShadingColor }} />\n              </Popover>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  if (colorConfig.type === ColorConfigType.Palette) {\n    return (\n      <div className=\"settings palette-settings\">\n        <Radio.Group name=\"paletteOrigin\" value={paletteOrigin} onChange={changePaletteOrigin}>\n          {Object.entries(PRESET_PALETTES).map(([origin, { name }]) => {\n            return (\n              <Radio key={origin} value={origin}>\n                {name}\n              </Radio>\n            )\n          })}\n          <Radio value={PaletteType.Custom}>Custom</Radio>\n        </Radio.Group>\n        <div>\n          {paletteOrigin === PaletteType.Custom ? (\n            <div className=\"palette-settings__custom-palette\">\n              <Select\n                className=\"custom-palette-number\"\n                value={customPaletteColors.length}\n                onChange={onPaletteSizeChange}\n                style={{ fontSize: '16px' }}\n              >\n                {Array.from({ length: 10 }, (_, i) => {\n                  return (\n                    <Select.Option key={i} value={i + 1} style={{ fontSize: '16px' }}>\n                      {i + 1}\n                    </Select.Option>\n                  )\n                })}\n              </Select>\n              <div className=\"palette-settings__custom-palette__colors palette-colors\">\n                {customPaletteColors.map((color, paletteIndex) => (\n                  <Popover\n                    content={\n                      <ChromePicker\n                        color={color}\n                        onChange={(c) => {\n                          onCustomPalettePickerChange(c, paletteIndex)\n                        }}\n                        onChangeComplete={(c) => {\n                          onCustomPalettePickerChangeComplete(c, paletteIndex)\n                        }}\n                        disableAlpha\n                      />\n                    }\n                    key={paletteIndex}\n                    placement=\"bottom\"\n                  >\n                    <div className=\"palette-colors__color\">\n                      <div className=\"palette-colors__color__fill\" style={{ backgroundColor: color }} />\n                    </div>\n                  </Popover>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <Select\n              className=\"palette-settings__preset\"\n              value={presetPaletteIndex[paletteOrigin]}\n              onChange={changePresetPaletteIndex}\n            >\n              {PRESET_PALETTES[paletteOrigin].palettes.map((palette, index) => {\n                return (\n                  <Select.Option value={index} key={index} dropdownStyle={{ display: 'flex', alignItems: 'center' }}>\n                    <div className=\"palette-colors\">\n                      {palette.map((hexColor) => {\n                        return (\n                          <div key={hexColor} className=\"palette-colors__color\">\n                            <div className=\"palette-colors__color__fill\" style={{ backgroundColor: hexColor }} />\n                          </div>\n                        )\n                      })}\n                    </div>\n                  </Select.Option>\n                )\n              })}\n            </Select>\n          )}\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n\nexport default ColorConfigSettings\n","import React, { useEffect, useState } from 'react'\nimport { Checkbox, Divider, Popover } from 'antd'\nimport { ChromePicker, ColorResult } from 'react-color'\nimport Title from 'antd/lib/typography/Title'\nimport {\n  ColorConfigNamesAndImage,\n  DEFAULT_PALETTE_CONFIG,\n  DEFAULT_SHADING_CONFIG,\n  RANDOM_CONFIG,\n} from 'Colors/constants'\nimport { ColorConfig, ColorConfigType, PaletteColorConfig, ShadingColorConfig } from 'Colors/types'\nimport 'Colors/colorConfigChoice.style.less'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\nimport { SpecificColorTransforms } from 'Maposaic/types'\nimport { createColor, getMaposaicColorsFromColorConfig, rgbToHex } from 'Colors/utils'\nimport ColorConfigSettings from 'Colors/ColorConfigSettings'\n\nimport 'Colors/colorConfigSettings.style.less' // for specific color picker\n\nconst ColorConfigChoice = ({\n  specificColorTransforms,\n  setNewSpecificColorTransforms,\n  colorConfig,\n  setColorConfig,\n}: {\n  specificColorTransforms: SpecificColorTransforms\n  setNewSpecificColorTransforms: (colors: SpecificColorTransforms) => void\n  colorConfig: ColorConfig\n  setColorConfig: (colorConfig: ColorConfig) => void\n}) => {\n  const [shadingColorConfig, setShadingColorConfig] = useState<ShadingColorConfig>(\n    colorConfig.type === ColorConfigType.Shading ? colorConfig : DEFAULT_SHADING_CONFIG,\n  )\n  const [paletteColorConfig, setPaletteColorConfig] = useState<PaletteColorConfig>(\n    colorConfig.type === ColorConfigType.Palette ? colorConfig : DEFAULT_PALETTE_CONFIG,\n  )\n  const [specificColorPicks, setSpecificColorPicks] = useState<Record<string, string>>({})\n\n  useEffect(() => {\n    const newPicks: Record<string, string> = {}\n    for (const colorKey in specificColorTransforms) {\n      const transform = specificColorTransforms[colorKey]\n      newPicks[colorKey] = transform.color ? transform.color : ''\n    }\n    setSpecificColorPicks(newPicks)\n  }, [specificColorTransforms])\n\n  const onColorTransformChange = (colorKey: string, e: CheckboxChangeEvent) => {\n    const newColorTransform = { ...specificColorTransforms }\n    newColorTransform[colorKey].color = e.target.checked\n      ? rgbToHex(createColor(getMaposaicColorsFromColorConfig(colorConfig)))\n      : null\n    setNewSpecificColorTransforms(newColorTransform)\n  }\n\n  const onSpecificColorPickerChange = (color: ColorResult, colorKey: string) => {\n    const newSpecificColorPicks = { ...specificColorPicks }\n    newSpecificColorPicks[colorKey] = color.hex.toLocaleLowerCase()\n    setSpecificColorPicks(newSpecificColorPicks)\n  }\n\n  const onSpecificColorPickerChangeComplete = (color: ColorResult, colorKey: string) => {\n    onSpecificColorPickerChange(color, colorKey)\n    const newColorTransform = { ...specificColorTransforms }\n    newColorTransform[colorKey].color = color.hex.toLocaleLowerCase()\n    setNewSpecificColorTransforms(newColorTransform)\n  }\n\n  const changeColorConfig = (configType: ColorConfigType) => {\n    if (configType === ColorConfigType.Random) {\n      setColorConfig(RANDOM_CONFIG)\n    } else if (configType === ColorConfigType.Shading) {\n      setColorConfig(shadingColorConfig)\n    } else {\n      setColorConfig(paletteColorConfig)\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"color-choice__configs\">\n        {Object.entries(ColorConfigNamesAndImage).map(([configName, config]) => {\n          return (\n            <div\n              key={configName}\n              className={`color-choice__configs__config${\n                colorConfig.type === configName ? ' color-choice__configs__config--selected' : ''\n              }`}\n              onClick={() => changeColorConfig(configName as ColorConfigType)}\n            >\n              <div>{config.name}</div>\n              <img\n                className={`color-config-image${\n                  colorConfig.type === configName ? ' color-config-image--selected' : ''\n                }`}\n                width=\"80px\"\n                alt={configName}\n                src={config.imgPath}\n              />\n            </div>\n          )\n        })}\n      </div>\n      <ColorConfigSettings\n        colorConfig={colorConfig}\n        setColorConfig={setColorConfig}\n        shadingColorConfig={shadingColorConfig}\n        setShadingColorConfig={setShadingColorConfig}\n        paletteColorConfig={paletteColorConfig}\n        setPaletteColorConfig={setPaletteColorConfig}\n      />\n      <Divider />\n\n      <div className=\"specific-colors\">\n        <Title level={4}>Color Overrides</Title>\n        <div className=\"specific-colors__content\">\n          {Object.entries(specificColorTransforms).map(([colorKey, transform]) => (\n            <div key={colorKey} className=\"specific-colors__color\">\n              <Checkbox\n                checked={transform.color !== null}\n                onChange={(e) => onColorTransformChange(colorKey, e)}\n                className=\"specific-color-checks__check\"\n              >\n                {`Same color for ${transform.name}`}\n              </Checkbox>\n              {transform.color && (\n                <Popover\n                  content={\n                    <ChromePicker\n                      color={specificColorPicks[colorKey]}\n                      onChange={(c) => {\n                        onSpecificColorPickerChange(c, colorKey)\n                      }}\n                      onChangeComplete={(c) => {\n                        onSpecificColorPickerChangeComplete(c, colorKey)\n                      }}\n                      disableAlpha\n                    />\n                  }\n                >\n                  <div className=\"palette-colors__color\">\n                    <div\n                      className=\"palette-colors__color__fill\"\n                      style={{ backgroundColor: specificColorPicks[colorKey] }}\n                    />\n                  </div>\n                </Popover>\n              )}\n              <br />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ColorConfigChoice\n","import { MapboxStyle } from 'Maposaic/types'\n\nexport const MAPBOX_STYLES = {\n  [MapboxStyle.Relief]: {\n    url: 'mapbox://styles/cartapuce/ckhf6cuex07dd19piqg029oka',\n    name: 'Relief',\n    imgPath:\n      'https://firebasestorage.googleapis.com/v0/b/maposaic-99785.appspot.com/o/app_assets%2Frelief-alpes.png?alt=media&token=add862d4-3a5e-49ff-aa1f-57b98543050a',\n  },\n  [MapboxStyle.Road]: {\n    url: 'mapbox://styles/cartapuce/ck8vk01zo2e5w1ipmytroxgf4',\n    name: 'Roads',\n    imgPath:\n      'https://firebasestorage.googleapis.com/v0/b/maposaic-99785.appspot.com/o/app_assets%2Fstreet-paris-fourche.png?alt=media&token=b247c027-eab3-4804-b08c-4fa971432f52',\n  },\n  [MapboxStyle.Water]: {\n    url: 'mapbox://styles/cartapuce/ck8ynyj0x022h1hpmffi87im9',\n    name: 'Water land',\n    imgPath:\n      'https://firebasestorage.googleapis.com/v0/b/maposaic-99785.appspot.com/o/app_assets%2Fwater-loire.png?alt=media&token=1b986519-854e-433e-bbc0-81b974a77a39',\n  },\n  administrative: { url: 'mapbox://styles/cartapuce/ck8vkvxjt27z71ila3b3jecka', name: '' },\n  satellite: { url: 'mapbox://styles/mapbox/satellite-v9', name: '' },\n  regular: { url: 'mapbox://styles/mapbox/streets-v11', name: '' },\n}\n","import React, { useEffect, useState } from 'react'\nimport { Drawer as AntDrawer, Button, Divider, InputNumber, Radio, Select, Tooltip } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport Title from 'antd/lib/typography/Title'\nimport { FormatPainterOutlined, InfoCircleOutlined } from '@ant-design/icons'\nimport { Badge } from 'antd'\nimport { ClockCircleOutlined } from '@ant-design/icons'\n\nimport 'Drawer/drawer.style.less'\nimport ColorConfig from 'Colors/ColorConfigChoice'\nimport { Format, FORMAT_SIZE, FORMATS } from 'constants/dimensions'\nimport { PRIMARY_COLOR } from 'constants/colors'\nimport { DrawerPropsType } from 'Drawer/types'\nimport { MapboxStyle } from 'Maposaic/types'\nimport { MAPBOX_STYLES } from 'Maposaic/constants'\n\nconst millisecondsToText = (millis: number | null) => {\n  const min = Math.floor((millis || 0) / 60000)\n  const ms = (millis || 0) % 60000\n  const s = Math.floor(ms / 1000)\n  const ds = Math.floor((ms % 1000) / 100)\n  return `${min > 0 ? `${min}:` : ''}${min && s < 10 ? `0${s}` : s}${min > 0 ? '' : `.${ds}s`}`\n}\n\nconst radioStyle = { display: 'flex', justifyContent: 'center', alignItems: 'center' }\n\nconst Drawer = ({\n  visible,\n  setDrawerVisible,\n  mapboxStyle,\n  changeMapStyle,\n  sizeFactor,\n  setNewSizeFactor,\n  colorConfig,\n  setColorConfig,\n  specificColorTransforms,\n  setNewSpecificColorTransforms,\n  remainingTime,\n  estimatedTime,\n  updateEstimatedTime,\n  onPosterSizeChange,\n}: DrawerPropsType) => {\n  const [localSizeFactor, setLocalSizeFactor] = useState(sizeFactor)\n  const [isLandscape, setIsLandscape] = useState<boolean | null>(null)\n  const [format, setFormat] = useState<Format>(Format.A4)\n\n  useEffect(() => setLocalSizeFactor(sizeFactor), [sizeFactor])\n\n  const onScaleChange = (value: number | undefined | string) => {\n    if (value !== undefined && typeof value !== 'string') {\n      updateEstimatedTime(value)\n      setLocalSizeFactor(value)\n    }\n  }\n\n  const applyGranularity = () => {\n    setNewSizeFactor(localSizeFactor)\n  }\n\n  const handleOrientationChange = (e: RadioChangeEvent) => {\n    setIsLandscape(e.target.value as boolean)\n    onPosterSizeChange({\n      isLandscape: e.target.value as boolean,\n      pixelPerInchResolution: 300,\n      longerPropertyCMLength: FORMAT_SIZE[format],\n    })\n  }\n\n  const handleFormatChange = (format: Format) => {\n    setFormat(format)\n    if (null === isLandscape) {\n      setIsLandscape(true)\n    }\n    onPosterSizeChange({\n      isLandscape: isLandscape ?? true,\n      pixelPerInchResolution: 300,\n      longerPropertyCMLength: FORMAT_SIZE[format],\n    })\n  }\n\n  return (\n    <AntDrawer\n      visible={visible}\n      placement=\"left\"\n      onClose={() => setDrawerVisible(false)}\n      closable={true}\n      width=\"min(100%,333px)\"\n    >\n      <Title level={3}>Colors</Title>\n      <ColorConfig\n        colorConfig={colorConfig}\n        setColorConfig={setColorConfig}\n        specificColorTransforms={specificColorTransforms}\n        setNewSpecificColorTransforms={setNewSpecificColorTransforms}\n      />\n\n      <Divider />\n      <Title level={3}>Background</Title>\n      <div className=\"drawer__backgroungs\">\n        {Object.values(MapboxStyle).map((style) => {\n          return (\n            <div\n              className={`drawer__backgroungs__background${\n                mapboxStyle === style ? ' drawer__backgroungs__background--selected' : ''\n              }`}\n              onClick={() => changeMapStyle(style)}\n              key={style}\n            >\n              <div>{MAPBOX_STYLES[style].name}</div>\n              <img\n                className={`background-image${mapboxStyle === style ? ' background-image--selected' : ''}`}\n                width=\"80px\"\n                alt={style}\n                src={MAPBOX_STYLES[style].imgPath}\n              />\n            </div>\n          )\n        })}\n      </div>\n      <Divider />\n      <Title level={3}>Poster</Title>\n      <div className=\"poster-options\">\n        <Select value={format} onSelect={handleFormatChange}>\n          {FORMATS.map((format) => {\n            return (\n              <Select.Option value={format} key={format}>\n                {format}\n              </Select.Option>\n            )\n          })}\n        </Select>\n        <Radio.Group\n          style={{ display: 'flex', alignItems: 'center' }}\n          name=\"preset\"\n          onChange={handleOrientationChange}\n          value={isLandscape}\n          size=\"small\"\n          className=\"poster-options__landscape\"\n        >\n          <Radio.Button style={{ width: '29px', height: '21px', ...radioStyle }} value={true}>\n            A\n          </Radio.Button>\n          <Radio.Button\n            style={{\n              width: '21px',\n              height: '29px',\n              marginLeft: '12px',\n              ...radioStyle,\n            }}\n            value={false}\n          >\n            A\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <Divider />\n      <Title level={3}>\n        Scale\n        <Tooltip className=\"scale-tooltip\" title=\"Increase size and... waiting time\">\n          <InfoCircleOutlined />\n        </Tooltip>\n      </Title>\n      <div className=\"scale\">\n        <InputNumber\n          min={0}\n          max={10}\n          step={0.1}\n          value={Math.round(localSizeFactor * 10) / 10}\n          onChange={onScaleChange}\n          style={{ width: '68px' }}\n        />\n        <Button\n          className=\"scale__paint\"\n          disabled={sizeFactor === localSizeFactor}\n          onClick={applyGranularity}\n          icon={<FormatPainterOutlined />}\n        >\n          Apply\n        </Button>\n        {(remainingTime || estimatedTime) && (\n          <Badge className=\"scale__time\" count={<ClockCircleOutlined style={{ color: PRIMARY_COLOR }} />}>\n            <span className=\"scale__time__box\">{millisecondsToText(remainingTime || estimatedTime)}</span>\n          </Badge>\n        )}\n      </div>\n    </AntDrawer>\n  )\n}\n\nexport default Drawer\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/paint.worker.c6695722.worker.js\");\n}\n","export type GeocodingData = {\n  features: {\n    place_name: string\n    place_type: PlaceType[]\n  }[]\n}\n\nexport enum PlaceType {\n  Poi = 'poi',\n  Address = 'address',\n  Neighborhood = 'neighborhood',\n  Locality = 'locality',\n  Postcode = 'postcode',\n  Place = 'place',\n  District = 'district',\n  Region = 'region',\n  Country = 'country',\n}\n\nexport type GeonameData = {\n  geodata: {\n    nearest: {\n      latt: number[]\n      longt: number[]\n      elevation: number[]\n      timezone: string[]\n      city: string[]\n      name: string[]\n      prov: string[]\n    }[]\n  }\n}\n","import { Size } from 'Canvas/types'\n\nexport const toggleCanvasOpacity = (isMapbox: boolean): void => {\n  const mapboxElement = document.getElementById('mapbox-wrapper')\n  const mosaicCanvas = document.getElementById('maposaic-canvas')\n  if (!mapboxElement || !mosaicCanvas) {\n    return\n  }\n  mapboxElement.style.opacity = isMapbox ? '1' : '0'\n  mosaicCanvas.style.opacity = isMapbox ? '0' : '1'\n}\n\nexport const setMapboxArtificialSize = (sizeFactor: number) => {\n  const mapboxWrapper = document.getElementById('mapbox-wrapper')\n  if (!mapboxWrapper) {\n    return\n  }\n  mapboxWrapper.style.width = (mapboxWrapper.offsetWidth * sizeFactor).toString() + 'px'\n  mapboxWrapper.style.height = (mapboxWrapper.offsetHeight * sizeFactor).toString() + 'px'\n}\n\nexport const setMapboxDisplaySize = () => {\n  const mapboxCanvas = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLElement\n  const mapboxWrapper = document.getElementById('mapbox-wrapper')\n  if (!mapboxCanvas || !mapboxWrapper) {\n    return\n  }\n  mapboxCanvas.style.width = '100%'\n  mapboxCanvas.style.height = '100%'\n  mapboxWrapper.style.width = '100%'\n  mapboxWrapper.style.height = '100%'\n}\n\nexport const resizeMapsContainer = (size: Size) => {\n  const container = document.getElementById('maps-container')\n  const mapboxWrapper = document.getElementById('mapbox-wrapper')\n  const mosaicCanvas = document.getElementById('maposaic-canvas')\n  if (!container || !mapboxWrapper || !mosaicCanvas) {\n    return\n  }\n  container.style.width = size.w.toString() + 'px'\n  container.style.height = size.h.toString() + 'px'\n  mapboxWrapper.style.width = size.w.toString() + 'px'\n  mapboxWrapper.style.height = size.h.toString() + 'px'\n  mosaicCanvas.style.width = size.w.toString() + 'px'\n  mosaicCanvas.style.height = size.h.toString() + 'px'\n}\n","// eslint-disable-next-line\nexport const MAPBOX_TOKEN: string = process.env['REACT_APP_MAPBOX_TOKEN'] || ''\n","export const GEOCODING_BASE_URL = 'https://api.mapbox.com/geocoding/v5/mapbox.places'\n","import { MAPBOX_TOKEN } from 'constants/mapbox'\nimport { GeocodingData, GeonameData, PlaceType } from 'types/geo'\nimport mapboxgl from 'mapbox-gl'\nimport { GEOCODING_BASE_URL } from 'Geo/constants'\n\nexport const PLACE_TYPE_RELEVANCE = [\n  PlaceType.Place,\n  PlaceType.Locality,\n  PlaceType.Postcode,\n  PlaceType.District,\n  PlaceType.Region,\n  PlaceType.Country,\n  PlaceType.Neighborhood,\n]\n\nexport const getPlaceNameFromPosition = async (center: mapboxgl.LngLat | null) => {\n  if (!center) {\n    return null\n  }\n  const geoResponse = await fetch(`${GEOCODING_BASE_URL}/${center.lng},${center.lat}.json?access_token=${MAPBOX_TOKEN}`)\n  const geoCoding = (await geoResponse.json()) as GeocodingData\n  for (const nextRelevantPlaceType of PLACE_TYPE_RELEVANCE) {\n    for (const feature of geoCoding.features) {\n      for (const foundPlaceType of feature.place_type) {\n        if (foundPlaceType === nextRelevantPlaceType) {\n          return feature.place_name\n        }\n      }\n    }\n  }\n  return null\n}\n\nexport const getPlaceNameFromGeoname = (data: GeonameData) => {\n  const city = data.geodata.nearest[0]?.city[0]\n  const timezone = data.geodata.nearest[0]?.timezone[0]\n  const prov = data.geodata.nearest[0]?.prov[0]\n  const isCity = city && city.length\n  const isTimezone = timezone && timezone.length\n  const isProv = prov && prov.length\n\n  if (!isCity && !isTimezone && !isProv) {\n    return null\n  }\n  return `${city}${isProv && ', '}${prov}${isTimezone && ', '}${timezone}`\n}\n\nexport const fetchGeoRandom = async (): Promise<mapboxgl.LngLat> => {\n  try {\n    const response = await fetch('https://us-central1-maposaic-99785.cloudfunctions.net/fetch3Geonames')\n    const data = (await response.json()) as GeonameData\n    return new mapboxgl.LngLat(\n      data.geodata.nearest[0]?.longt[0] ?? 2.338272,\n      data.geodata.nearest[0]?.latt[0] ?? 48.858796,\n    )\n  } catch {\n    return new mapboxgl.LngLat(Math.random() * 100, Math.random() * 50 + 10)\n  }\n}\n\nexport const getRandomZoom = () => {\n  // mapbox zoom range : 0 (most zoom out) - 22\n  return Math.random() * 13 + 3\n}\n","import { CompassOutlined } from '@ant-design/icons'\nimport { Button } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport 'PlaceName/placeName.style.less'\n\nconst PlaceName = ({\n  placeName,\n  showPlaceNameTrigger,\n}: {\n  placeName: string | null\n  showPlaceNameTrigger: boolean\n}) => {\n  const [isTextDisplayed, setIsTextDisplayed] = useState(false)\n  const [isFirstRender, setIsFirstRender] = useState(true)\n\n  useEffect(() => {\n    if (showPlaceNameTrigger) {\n      setIsFirstRender(false)\n    }\n  }, [isFirstRender, showPlaceNameTrigger])\n\n  const showPlaceNameTriggerRef = useRef<undefined | boolean>()\n  useEffect(() => {\n    if (!showPlaceNameTriggerRef.current && showPlaceNameTrigger) {\n      if (isTextDisplayed) {\n        return\n      }\n      setIsTextDisplayed(true)\n      setTimeout(() => setIsTextDisplayed(false), 4000)\n    }\n\n    showPlaceNameTriggerRef.current = showPlaceNameTrigger\n    // eslint-disable-next-line\n  }, [showPlaceNameTrigger])\n\n  const onCompassClick = () => {\n    setIsTextDisplayed(!isTextDisplayed)\n  }\n\n  const getAdditionalPlaceNameClass = () => {\n    if (isTextDisplayed) {\n      return 'place-name--displayed'\n    }\n    if (isFirstRender) {\n      return 'place-name--hidden'\n    }\n    return 'place-name--hidden place-name--hidden--animation'\n  }\n\n  return (\n    <div className={`place-name ${getAdditionalPlaceNameClass()}`} onClick={onCompassClick}>\n      <Button className=\"show-place-name\" shape=\"circle\" onClick={onCompassClick} icon={<CompassOutlined />} />\n      <div className=\"place-name__text\">{placeName ?? '...'}</div>\n    </div>\n  )\n}\n\nexport default PlaceName\n","import React, { useState } from 'react'\nimport { AutoComplete, Input } from 'antd'\nimport mapboxgl from 'mapbox-gl'\nimport { MAPBOX_TOKEN } from 'constants/mapbox'\nimport { DrawerPropsType } from 'Drawer/types'\nimport { LoadingOutlined, SearchOutlined } from '@ant-design/icons'\nimport { GEOCODING_BASE_URL } from 'Geo/constants'\n\ntype GeocoderFeature = {\n  id: string\n  place_name: string\n  center: [number, number]\n}\n\ntype GeocoderResult = {\n  features: GeocoderFeature[]\n}\n\nconst GeoSearch = ({\n  flyTo,\n  currentCenter,\n  setDrawerVisible,\n  className,\n}: {\n  flyTo: (center: mapboxgl.LngLat) => void\n  currentCenter: mapboxgl.LngLat | null\n  setDrawerVisible: DrawerPropsType['setDrawerVisible']\n  className?: string\n}) => {\n  const [searchText, setSearchText] = useState('')\n  const [options, setOptions] = useState<GeocoderFeature[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n\n  const handleSearch = async (value: string) => {\n    setSearchText(value)\n    if (value.length < 1) {\n      setOptions([])\n      return\n    }\n    setIsSearching(true)\n    const proximity = currentCenter ? `&proximity=${currentCenter.lng}%2C${currentCenter.lat}` : ''\n    const request = `${GEOCODING_BASE_URL}/${value}.json?limit=10&language=fr-FR&access_token=${MAPBOX_TOKEN}${proximity}`\n    const res = await fetch(request)\n    const body = (await res.json()) as GeocoderResult\n    setIsSearching(false)\n    setOptions(body.features)\n  }\n\n  const handleSelect = (value: string) => {\n    const targetOption = options.find((option) => option.id === value)\n    if (targetOption) {\n      setDrawerVisible(false)\n      flyTo(new mapboxgl.LngLat(targetOption.center[0], targetOption.center[1]))\n    }\n  }\n\n  const optionChildren = options.map((option) => {\n    const [address, ...rest] = option.place_name.split(',')\n    return {\n      value: option.id,\n      label: (\n        <div>\n          <div style={{ fontWeight: 500 }}>{address}</div>\n          <div>{rest.join('')}</div>\n        </div>\n      ),\n    }\n  })\n\n  return (\n    <AutoComplete\n      className={className}\n      onSearch={handleSearch}\n      onSelect={handleSelect}\n      value={searchText}\n      placeholder=\"Search place\"\n      options={optionChildren}\n    >\n      <Input style={{ borderRadius: '16px' }} suffix={isSearching ? <LoadingOutlined /> : <SearchOutlined />} />\n    </AutoComplete>\n  )\n}\n\nexport default GeoSearch\n","import React, { Suspense, useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { Button, Tooltip } from 'antd'\nimport { CloudDownloadOutlined, PictureOutlined, SettingOutlined } from '@ant-design/icons'\nimport { useHistory } from 'react-router-dom'\nimport { Spin } from 'antd'\nimport spinner from 'assets/spinner.png'\nimport dice from 'assets/dice.svg'\nimport gps from 'assets/gps.svg'\n\nimport Drawer from 'Drawer/Drawer'\n\n// eslint-disable-next-line\nimport PaintWorker from 'worker-loader!./paint.worker'\n\nimport 'Maposaic/maposaic.style.less'\nimport 'spinner.style.less'\n\nimport { ColorConfig } from 'Colors/types'\nimport { getTargetSizeFromSourceSize } from 'Canvas/utils'\nimport { ROAD_SIMPLE_WHITE, WATER_CYAN } from 'Colors/mapbox'\nimport { RANDOM_CONFIG, ROAD_WHITE } from 'Colors/constants'\nimport {\n  MapboxStyle,\n  MAPOSAIC_STYLE_URL_PARAM_KEY,\n  MaposaicGeoURLParamKey,\n  OnPosterSizeChangePayload,\n  SpecificColorTransforms,\n} from 'Maposaic/types'\nimport { Size } from 'Canvas/types'\nimport {\n  resizeMapsContainer,\n  setMapboxArtificialSize,\n  setMapboxDisplaySize,\n  toggleCanvasOpacity,\n} from 'Maposaic/elementHelpers'\nimport { CM_PER_INCH, FORMAT_RATIO } from 'constants/dimensions'\nimport { TOOLTIP_ENTER_DELAY } from 'constants/ux'\nimport { MAPBOX_TOKEN } from 'constants/mapbox'\nimport { fetchGeoRandom, getPlaceNameFromPosition, getRandomZoom } from 'Geo/utils'\nimport PlaceName from 'PlaceName/PlaceName'\nimport GeoSearch from 'Geo/GeoSearchInput'\nimport { createMaposaicColors } from 'Colors/utils'\nimport { MAPBOX_STYLES } from 'Maposaic/constants'\nimport {\n  getColorConfigFromURLParams,\n  getURLParamsFromColorConfig,\n  getURLParamsFromCoords,\n  useCheckWasmAvailability,\n} from 'Maposaic/utils'\nimport { UploadButton } from 'CloudUpload/CloudUpload'\n\nconst CloudUpload = React.lazy(() => import('CloudUpload/CloudUpload'))\n\nmapboxgl.accessToken = MAPBOX_TOKEN\n\nconst INITIAL_SIZE_FACTOR = 1\nconst DISPLAY_PIXEL_RATIO = 1\n\nlet mapboxResolutionRatio: number | null = null\nlet paintWorker = new PaintWorker()\n\nconst getMapboxPixelCount = (map: mapboxgl.Map) => {\n  const mapboxCanvas = map.getCanvas()\n  const gl = mapboxCanvas.getContext('webgl')\n  return (gl?.drawingBufferWidth ?? 0) * (gl?.drawingBufferHeight || 0)\n}\n\nconst computeTime: { pixelCount: number | null; milliseconds: number | null } = {\n  pixelCount: null,\n  milliseconds: null,\n}\n\nlet lastStartDate = new Date()\n\nconst MapboxGLMap = (): JSX.Element => {\n  const history = useHistory()\n  const [isWasmAvailable, setIsWasmAvailable] = useState(false)\n  const [isInitialUrlParamsParsed, setIsInitialUrlParamsParsed] = useState(false)\n  const [map, setMap] = useState<mapboxgl.Map | null>(null)\n  const mapboxContainer = useRef<HTMLDivElement | null>(null)\n  const [drawerVisible, setDrawerVisible] = useState(false)\n  const [estimatedTime, setEstimatedTime] = useState<number | null>(null)\n  const [remainingTime, setRemainingTime] = useState<number | null>(null)\n  const [mapboxStyle, setMapboxStyle] = useState(MapboxStyle.Relief)\n  const [colorConfig, setColorConfig] = useState<ColorConfig>(RANDOM_CONFIG)\n  const [isLoading, setIsLoading] = useState(true)\n  const [currentCenter, setCurrentCenter] = useState<null | mapboxgl.LngLat>(null)\n  const [placeName, setPlaceName] = useState<null | string>(null)\n  const [sizeRender, setSizeRender] = useState(0)\n  const [sizeFactor, setSizeFactor] = useState(INITIAL_SIZE_FACTOR)\n  const [initialCenter, setInitialCenter] = useState<null | mapboxgl.LngLat>(null)\n  const [initialZoom, setInitialZoom] = useState<number>(getRandomZoom())\n  const [showPlaceNameTrigger, setShowPlaceNameTrigger] = useState(false)\n  const [showPlaceNameWhenFetched, setShowPlaceNameWhenFetched] = useState(false)\n  const [specificColorTransforms, setSpecificColorTransforms] = useState<SpecificColorTransforms>({\n    [ROAD_SIMPLE_WHITE]: { color: ROAD_WHITE, isEditable: true, name: 'roads' },\n    [WATER_CYAN]: { color: null, isEditable: true, name: 'water' },\n  })\n\n  useEffect(() => {\n    if (!currentCenter || !map) {\n      return\n    }\n    const urlParams = getURLParamsFromCoords(currentCenter, map.getZoom(), new URLSearchParams(window.location.search))\n    window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`)\n  }, [currentCenter, map])\n\n  useCheckWasmAvailability(setIsWasmAvailable)\n\n  useEffect(() => {\n    if (!isInitialUrlParamsParsed) {\n      return\n    }\n    const urlParams = getURLParamsFromColorConfig(colorConfig, new URLSearchParams(window.location.search))\n    window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`)\n  }, [colorConfig, isInitialUrlParamsParsed])\n\n  useEffect(() => {\n    if (!isInitialUrlParamsParsed) {\n      return\n    }\n    const urlParams = new URLSearchParams(window.location.search)\n    urlParams.set(MAPOSAIC_STYLE_URL_PARAM_KEY, mapboxStyle)\n    window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`)\n  }, [mapboxStyle, isInitialUrlParamsParsed])\n\n  const setRandomCoords = async (setZoom = true) => {\n    setIsLoading(true)\n    const randomCenter = await fetchGeoRandom()\n    setShowPlaceNameWhenFetched(true)\n    if (initialZoom === null && setZoom) {\n      setInitialZoom(getRandomZoom())\n    }\n    if (!initialCenter) {\n      setInitialCenter(randomCenter)\n      return\n    }\n    if (!map) {\n      return\n    }\n    map.setCenter(randomCenter)\n    if (setZoom) {\n      map.setZoom(getRandomZoom())\n    }\n  }\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const lat = urlParams.get(MaposaicGeoURLParamKey.Lat)\n    const lng = urlParams.get(MaposaicGeoURLParamKey.Lng)\n    const zoom = urlParams.get(MaposaicGeoURLParamKey.Zoom)\n    if (lat && lng) {\n      setInitialCenter(new mapboxgl.LngLat(parseFloat(lng), parseFloat(lat)))\n    } else {\n      setRandomCoords(!zoom)\n    }\n    if (zoom) {\n      setInitialZoom(parseFloat(zoom))\n    }\n    const colorConfig = getColorConfigFromURLParams(new URLSearchParams(window.location.search))\n    if (colorConfig) {\n      setColorConfig(colorConfig)\n    }\n    const style = urlParams.get(MAPOSAIC_STYLE_URL_PARAM_KEY)\n    if (style && Object.values(MapboxStyle).includes(style as MapboxStyle)) {\n      setMapboxStyle(style as MapboxStyle)\n    }\n    setIsInitialUrlParamsParsed(true)\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    const paintMosaic = (newMap: mapboxgl.Map): void => {\n      setIsLoading(true)\n      toggleCanvasOpacity(true)\n      const mapboxCanvas = newMap.getCanvas()\n      const gl = mapboxCanvas.getContext('webgl')\n      const mapboxWrapper = document.getElementById('mapbox-wrapper')\n      const maposaicCanvas = document.getElementById('maposaic-canvas') as HTMLCanvasElement\n\n      if (!gl || !gl.drawingBufferWidth || !maposaicCanvas) {\n        console.log('pas de gl')\n        return\n      }\n      const mapboxCanvasSize = { w: gl.drawingBufferWidth, h: gl.drawingBufferHeight }\n      const maposaicCanvasSize = getTargetSizeFromSourceSize(mapboxCanvasSize, DISPLAY_PIXEL_RATIO)\n\n      if (null === mapboxResolutionRatio) {\n        // mapbox render with *2 resolution on some screens (like retina ones)\n        mapboxResolutionRatio = gl.drawingBufferWidth / (mapboxWrapper?.offsetWidth || 1)\n      }\n\n      maposaicCanvas.setAttribute('width', maposaicCanvasSize.w.toString())\n      maposaicCanvas.setAttribute('height', maposaicCanvasSize.h.toString())\n\n      const maposaicContext = maposaicCanvas.getContext('2d')\n      if (!maposaicContext) {\n        return\n      }\n      const imageData = maposaicContext.getImageData(0, 0, maposaicCanvasSize.w, maposaicCanvasSize.h)\n      const maposaicData = imageData.data\n\n      const mapboxPixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4)\n      gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, mapboxPixels)\n\n      paintWorker.postMessage({\n        sourcePixelArray: mapboxPixels,\n        targetPixelArray: maposaicData,\n        sourceSize: mapboxCanvasSize,\n        targetSize: maposaicCanvasSize,\n        canvassRatio: DISPLAY_PIXEL_RATIO,\n        maposaicColors: createMaposaicColors(colorConfig, specificColorTransforms),\n        specificColorTransforms,\n        isWasmAvailable,\n      })\n\n      paintWorker.onmessage = function (e: { data: { pixels: number[]; paintedBoundsMin: number } }): void {\n        imageData.data.set(e.data.pixels, e.data.paintedBoundsMin)\n        maposaicContext.putImageData(imageData, 0, 0)\n        toggleCanvasOpacity(false)\n        setIsLoading(false)\n        setRemainingTime(0)\n\n        const pixelCount = Math.floor(e.data.pixels.length / 4)\n        const duration = new Date().getTime() - lastStartDate.getTime()\n        if (pixelCount >= (computeTime.pixelCount ?? 0)) {\n          computeTime.pixelCount = Math.floor(e.data.pixels.length / 4)\n          computeTime.milliseconds = duration\n        }\n        setEstimatedTime(duration)\n      }\n    }\n    if (!initialCenter) {\n      return\n    }\n\n    const center = map?.getCenter() ?? initialCenter\n    const zoom = map?.getZoom() ?? initialZoom\n\n    setMapboxArtificialSize(sizeFactor)\n\n    const newMap = new mapboxgl.Map({\n      container: mapboxContainer.current ? mapboxContainer.current : '',\n      style: MAPBOX_STYLES[mapboxStyle].url,\n      zoom,\n      center,\n      maxTileCacheSize: 0,\n    })\n    newMap.on('load', () => {\n      setMap(newMap)\n    })\n\n    newMap.on('resize', () => {\n      setSizeRender((s) => s + 1)\n    })\n    newMap.on('dragstart', toggleCanvasOpacity)\n    newMap.on('zoomstart', toggleCanvasOpacity)\n\n    newMap.on('render', () => {\n      setMapboxDisplaySize()\n      if (!newMap.loaded() || newMap.isMoving() || newMap.isZooming()) {\n        return\n      }\n      paintWorker.terminate()\n\n      const pixelCount = getMapboxPixelCount(newMap)\n      setRemainingTime(Math.round(((computeTime.milliseconds || 0) * pixelCount) / (computeTime.pixelCount || 1)))\n\n      lastStartDate = new Date()\n      paintWorker = new PaintWorker()\n      paintMosaic(newMap)\n      if (newMap.getCenter().lat !== currentCenter?.lat && newMap.getCenter().lng !== currentCenter?.lng) {\n        setCurrentCenter(newMap.getCenter())\n      }\n    })\n    return () => {\n      newMap.remove()\n    }\n    // eslint-disable-next-line\n  }, [mapboxStyle, colorConfig, sizeRender, sizeFactor, specificColorTransforms, initialCenter, isWasmAvailable])\n\n  const changeMapStyle = (newStyle: MapboxStyle) => {\n    toggleCanvasOpacity(true)\n    setIsLoading(true)\n    setMapboxStyle(newStyle)\n  }\n\n  const setNewColorConfig = (colorConfig: ColorConfig) => {\n    setColorConfig(colorConfig)\n    setIsLoading(true)\n  }\n  const setNewSizeFactor = (sizeFactor: number) => {\n    setSizeFactor(sizeFactor)\n    setIsLoading(true)\n  }\n  const setNewSpecificColorTransforms = (colorTransforms: SpecificColorTransforms) => {\n    setSpecificColorTransforms(colorTransforms)\n    setIsLoading(true)\n  }\n\n  const flyTo = (center: mapboxgl.LngLat) => {\n    if (!map) {\n      return\n    }\n    toggleCanvasOpacity(true)\n    setIsLoading(true)\n    map.setCenter(center)\n  }\n\n  const onPosterSizeChange = ({\n    isLandscape,\n    pixelPerInchResolution,\n    longerPropertyCMLength,\n  }: OnPosterSizeChangePayload) => {\n    if (!map) {\n      return\n    }\n\n    const rootWrapper = document.getElementById('root-wrapper')\n    const mapsContainerSize = { w: rootWrapper?.offsetWidth || 0, h: rootWrapper?.offsetHeight || 0 }\n\n    const longerProperty = isLandscape ? 'w' : 'h'\n    const smallerProperty = longerProperty === 'h' ? 'w' : 'h'\n\n    const targetSize = {\n      [smallerProperty]: Math.floor(mapsContainerSize[longerProperty] / FORMAT_RATIO),\n      [longerProperty]: mapsContainerSize[longerProperty],\n    } as Size\n\n    if (targetSize[smallerProperty] > mapsContainerSize[smallerProperty]) {\n      targetSize[smallerProperty] = mapsContainerSize[smallerProperty]\n      targetSize[longerProperty] = Math.floor(mapsContainerSize[smallerProperty] * FORMAT_RATIO)\n    }\n\n    setIsLoading(true)\n    resizeMapsContainer(targetSize)\n    setSizeRender(sizeRender + 1)\n\n    const target1DPixelCount = (longerPropertyCMLength / CM_PER_INCH) * pixelPerInchResolution\n    const current1DPixelCount = targetSize[longerProperty] * (mapboxResolutionRatio || 1)\n    const newSizeFactor = target1DPixelCount / current1DPixelCount\n    setSizeFactor(newSizeFactor)\n  }\n\n  useEffect(() => {\n    if (!remainingTime || remainingTime <= 0) {\n      return\n    }\n\n    const interval = setInterval(() => {\n      setRemainingTime(Math.max(Math.round(remainingTime - 200), 0))\n    }, 200)\n    return () => clearInterval(interval)\n  }, [remainingTime])\n\n  const updateEstimatedTime = (pendingSizeFactor: number) => {\n    if (!map) {\n      return\n    }\n    const pixelCount = getMapboxPixelCount(map)\n    setEstimatedTime(\n      Math.round(((computeTime.milliseconds || 0) * pixelCount) / (computeTime.pixelCount || 1)) *\n        Math.pow(pendingSizeFactor / sizeFactor, 2),\n    )\n  }\n\n  const onCurrentCenterChange = async () => {\n    const placeName = await getPlaceNameFromPosition(currentCenter)\n    setPlaceName(placeName)\n    if (showPlaceNameWhenFetched) {\n      setShowPlaceNameTrigger(true)\n      setShowPlaceNameWhenFetched(false)\n    }\n  }\n\n  useEffect(() => {\n    onCurrentCenterChange()\n    // eslint-disable-next-line\n  }, [currentCenter])\n\n  useEffect(() => {\n    setShowPlaceNameTrigger(false)\n  }, [showPlaceNameTrigger])\n\n  const download = () => {\n    const mosaicElement = document.getElementById('maposaic-canvas') as HTMLCanvasElement | null\n    if (!mosaicElement) {\n      return\n    }\n    mosaicElement.toBlob((blob) => {\n      const link = document.createElement('a')\n      link.download = placeName ? `maposaic - ${placeName}` : 'maposaic'\n      link.href = URL.createObjectURL(blob)\n      link.click()\n    })\n  }\n\n  const onGeolocationClick = () => {\n    if (!map) {\n      return\n    }\n    setIsLoading(true)\n    if (!navigator.geolocation) {\n      setIsLoading(false)\n      console.log('Geolocation is not supported by your browser')\n    } else {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          map.setCenter(new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude))\n        },\n        () => setIsLoading(false),\n      )\n    }\n  }\n\n  return (\n    <div className=\"root-wrapper\" id=\"root-wrapper\">\n      <div className=\"maps-container\" id=\"maps-container\">\n        <canvas className=\"mosaic-canvas\" id=\"maposaic-canvas\" />\n        <div id=\"mapbox-wrapper\" className=\"mapbox-wrapper\" ref={(el) => (mapboxContainer.current = el)} />\n        <Spin\n          className=\"maps-container__spin\"\n          spinning={isLoading}\n          indicator={<img className=\"spinner\" src={spinner} alt=\"spin\" />}\n        />\n      </div>\n      <div className=\"overmap\">\n        <Drawer\n          visible={drawerVisible}\n          setDrawerVisible={setDrawerVisible}\n          changeMapStyle={changeMapStyle}\n          mapboxStyle={mapboxStyle}\n          colorConfig={colorConfig}\n          setColorConfig={setNewColorConfig}\n          sizeFactor={sizeFactor}\n          setNewSizeFactor={setNewSizeFactor}\n          specificColorTransforms={specificColorTransforms}\n          setNewSpecificColorTransforms={setNewSpecificColorTransforms}\n          remainingTime={remainingTime}\n          estimatedTime={estimatedTime}\n          updateEstimatedTime={updateEstimatedTime}\n          onPosterSizeChange={onPosterSizeChange}\n        />\n        <div className=\"overmap__actions\">\n          <Tooltip title=\"Settings\" mouseEnterDelay={TOOLTIP_ENTER_DELAY}>\n            <Button\n              className=\"overmap__actions__button\"\n              type=\"primary\"\n              shape=\"circle\"\n              onClick={() => {\n                setDrawerVisible(true)\n              }}\n              icon={<SettingOutlined />}\n            />\n          </Tooltip>\n          <Tooltip title=\"Download\" mouseEnterDelay={TOOLTIP_ENTER_DELAY}>\n            <Button\n              className=\"overmap__actions__button\"\n              type=\"default\"\n              shape=\"circle\"\n              onClick={download}\n              icon={<CloudDownloadOutlined />}\n              disabled={isLoading}\n            />\n          </Tooltip>\n          <Suspense fallback={<UploadButton isDisabled={true} />}>\n            <CloudUpload\n              mapZoom={map?.getZoom()}\n              mapCenter={map?.getCenter()}\n              mapboxStyle={mapboxStyle}\n              colorConfig={colorConfig}\n              placeName={placeName}\n              className=\"overmap__actions__button\"\n              isDisabled={isLoading}\n            />\n          </Suspense>\n          <Tooltip title=\"Visit gallery\">\n            <Button\n              className=\"overmap__actions__button\"\n              onClick={() => {\n                history.push('/gallery')\n              }}\n              shape=\"circle\"\n              icon={<PictureOutlined />}\n            />\n          </Tooltip>\n        </div>\n        <div className=\"overmap__actions\">\n          <GeoSearch\n            className=\"overmap__actions__button\"\n            flyTo={flyTo}\n            currentCenter={currentCenter}\n            setDrawerVisible={setDrawerVisible}\n          />\n          <Tooltip title=\"Random place\" mouseEnterDelay={TOOLTIP_ENTER_DELAY}>\n            <Button\n              className=\"overmap__actions__button\"\n              style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n              shape=\"circle\"\n              onClick={() => setRandomCoords(true)}\n              icon={<img src={dice} width=\"16px\" alt=\"dice\" />}\n            />\n          </Tooltip>\n          <Button\n            onClick={onGeolocationClick}\n            className=\"overmap__actions__button\"\n            shape=\"circle\"\n            icon={<img src={gps} width=\"16px\" alt=\"gps\" />}\n          />\n        </div>\n      </div>\n      <PlaceName showPlaceNameTrigger={showPlaceNameTrigger} placeName={placeName} />\n    </div>\n  )\n}\n\nexport default MapboxGLMap\n","export const ROAD_SIMPLE_WHITE = '#ffffff'\nexport const WATER_CYAN = '#75cff0'\n","import { imagePoint, Size } from 'Canvas/types'\n\nexport const getPointFromPixelIndex = (pixelIndex: number, canvasWidth: number): imagePoint => {\n  return { x: pixelIndex % canvasWidth, y: Math.floor(pixelIndex / canvasWidth) }\n}\nexport const getPixelIndexFromPoint = (point: imagePoint, canvasWidth: number): number => {\n  return point.y * canvasWidth + point.x\n}\n\nexport const getSourcePointFromTargetPoint = (targetPoint: imagePoint, targetSize: Size, canvassRatio: number) => {\n  return {\n    x: canvassRatio * targetPoint.x,\n    y: canvassRatio * (targetSize.h - 1 - targetPoint.y),\n  }\n}\n\nexport const getSourcePixelIndexFromTargetPixelIndex = ({\n  targetPixelIndex,\n  targetSize,\n  sourceSize,\n  canvassRatio,\n}: {\n  targetPixelIndex: number\n  targetSize: Size\n  sourceSize: Size\n  canvassRatio: number\n}) => {\n  const targetPoint = getPointFromPixelIndex(targetPixelIndex, targetSize.w)\n  const sourcePoint = getSourcePointFromTargetPoint(targetPoint, targetSize, canvassRatio)\n  return getPixelIndexFromPoint(sourcePoint, sourceSize.w)\n}\n\nexport const getAdjacentPoints = ({ point, canvasSize }: { point: imagePoint; canvasSize: Size }) => ({\n  S: point.y < canvasSize.h - 1 ? { x: point.x, y: point.y + 1 } : null,\n  E: point.x < canvasSize.w - 1 ? { x: point.x + 1, y: point.y } : null,\n  O: point.x > 0 ? { x: point.x - 1, y: point.y } : null,\n  N: point.y > 0 ? { x: point.x, y: point.y - 1 } : null,\n  // NE: point.y > 0 && point.x < maposaicWidth - 1 ? { x: point.x + 1, y: point.y - 1 } : null,\n  // NO: point.y > 0 && point.x > 0 ? { x: point.x - 1, y: point.y - 1 } : null,\n  // SE: point.y < maposaicHeight - 1 && point.x < maposaicWidth - 1 ? { x: point.x + 1, y: point.y + 1 } : null,\n  // SO: point.y < maposaicHeight - 1 && point.x > 0 ? { x: point.x - 1, y: point.y + 1 } : null,\n})\n\nexport const getTargetSizeFromSourceSize = (sourceSize: Size, canvassRatio: number) => {\n  return {\n    w: Math.ceil(sourceSize.w / canvassRatio),\n    h: Math.ceil(sourceSize.h / canvassRatio),\n  }\n}\n"],"sourceRoot":""}