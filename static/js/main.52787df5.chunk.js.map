{"version":3,"sources":["Mapozaic/paint.worker.ts","Mapozaic/Mapozaic.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","styles","width","height","position","paintWorker","PaintWorker","showMapboxCanvas","mapboxCanvas","document","getElementById","cvs","style","opacity","MapboxGLMap","useState","map","setMap","mapContainer","useRef","isLoading","setIsLoading","paintMozaic","a","getCanvas","gl","getContext","console","log","W","drawingBufferWidth","H","drawingBufferHeight","mapozaicCanvas","setAttribute","toString","mapozaicContext","imageData","getImageData","mapozaicData","data","mapboxPixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","onmessage","e","set","putImageData","postMessage","useEffect","mapboxgl","accessToken","process","Map","container","current","zoom","center","lng","lat","on","resize","loaded","isMoving","isZooming","terminate","initializeMap","className","id","ref","el","App","Mapozaic","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAO,IAA0B,oC,oPCSxCC,G,MAAS,CACbC,MAAO,QACPC,OAAQ,cACRC,SAAU,aAMRC,EAAc,IAAIC,IAEhBC,EAAmB,WACvB,IAAMC,EAAeC,SAASC,eAAe,cACvCC,EAAMF,SAASC,eAAe,gBACpCF,EAAaI,MAAMC,QAAU,IAC7BF,EAAIC,MAAMC,QAAU,KAsFPC,EAnFK,WAAoB,IAAD,EACfC,mBAA8B,MADf,mBAC9BC,EAD8B,KACzBC,EADyB,KAE/BC,EAAeC,iBAA8B,MAFd,EAGHJ,oBAAS,GAHN,mBAG9BK,EAH8B,KAGnBC,EAHmB,KAK/BC,EAAW,uCAAG,WAAON,GAAP,+BAAAO,EAAA,yDAClBF,GAAa,GACbd,IACMC,EAAeQ,EAAIQ,YACnBC,EAAKjB,EAAakB,WAAW,SAJjB,uBAMhBC,QAAQC,IAAI,aANI,6BASZC,EAAIJ,EAAGK,mBACPC,EAAIN,EAAGO,qBAEPC,EAAiBxB,SAASC,eAAe,iBAChCwB,aAAa,QAASL,EAAEM,YACvCF,EAAeC,aAAa,SAAUH,EAAEI,YAClCC,EAAkBH,EAAeP,WAAW,MAfhC,mDAmBZW,EAAYD,EAAgBE,aAAa,EAAG,EAAGL,EAAe/B,MAAO+B,EAAe9B,QACpFoC,EAAeF,EAAUG,KACzBC,EAAe,IAAIC,WAAWjB,EAAGK,mBAAqBL,EAAGO,oBAAsB,GACrFP,EAAGkB,WAAW,EAAG,EAAGlB,EAAGK,mBAAoBL,EAAGO,oBAAqBP,EAAGmB,KAAMnB,EAAGoB,cAAeJ,GAC9FpC,EAAYyC,UAAY,SAAUC,GAChCV,EAAUG,KAAKQ,IAAID,EAAEP,MACrBJ,EAAgBa,aAAaZ,EAAW,EAAG,GACrB5B,SAASC,eAAe,cAChCE,MAAMC,QAAU,IAC9BoB,EAAerB,MAAMC,QAAU,IAC/BQ,GAAa,IAEfhB,EAAY6C,YAAY,CAAET,eAAcF,eAAcV,IAAGE,MA/BvC,4CAAH,sDAqEjB,OAnCAoB,qBAAU,WACRC,IAASC,YA5DSC,gGAyFbtC,GAAOE,GA5BU,SAACA,GACrB,IAAMF,EAAM,IAAIoC,IAASG,IAAI,CAC3BC,UAAWtC,EAAauC,QAAUvC,EAAauC,QAAU,GACzD7C,MAAO,sDAEP8C,KAAM,GACNC,OAAQ,CACNC,IAAK,SACLC,IAAK,aAIT7C,EAAI8C,GAAG,QAAQ,WACb7C,EAAOD,GACPA,EAAI+C,YAEN/C,EAAI8C,GAAG,YAAavD,GACpBS,EAAI8C,GAAG,YAAavD,GACpBS,EAAI8C,GAAG,UAAU,YACV9C,EAAIgD,UAAYhD,EAAIiD,YAAcjD,EAAIkD,cAG3C7D,EAAY8D,YACZ9D,EAAc,IAAIC,IAClBgB,EAAYN,OAKdoD,CAAclD,KAEf,CAACF,IAGF,yBAAKqD,UAAU,aACb,4BAAQA,UAAU,SAASnE,MAAM,MAAMC,OAAO,MAAMmE,GAAG,iBACvD,yBAAKA,GAAG,aAAaC,IAAK,SAACC,GAAD,OAAStD,EAAauC,QAAUe,GAAK5D,MAAOX,IACrEmB,GAAa,yBAAKiD,UAAU,WAAf,gBClGLI,MAJf,WACE,OAAO,kBAACC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzE,SAASC,eAAe,SDuHpB,kBAAmByE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.52787df5.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"0732dc95c4c8d9c9c2c0.worker.js\");\n};","import React, { useState, useRef, useEffect, MutableRefObject } from 'react'\nimport mapboxgl from 'mapbox-gl'\n// eslint-disable-next-line\nimport PaintWorker from 'worker-loader!./paint.worker'\n\nimport './style.css'\n\n// eslint-disable-next-line\nconst token: string = process.env['REACT_APP_MAPBOX_TOKEN'] || ''\n\nconst styles = {\n  width: '100vw',\n  height: 'calc(100vh)',\n  position: 'absolute',\n} as React.CSSProperties\n\nexport type RGBColor = { r: number; g: number; b: number }\nexport type imagePoint = { x: number; y: number }\n\nlet paintWorker = new PaintWorker()\n\nconst showMapboxCanvas = (): void => {\n  const mapboxCanvas = document.getElementById('mapbox-cvs') as HTMLCanvasElement\n  const cvs = document.getElementById('mapozaic-cvs') as HTMLCanvasElement\n  mapboxCanvas.style.opacity = '1'\n  cvs.style.opacity = '0'\n}\n\nconst MapboxGLMap = (): JSX.Element => {\n  const [map, setMap] = useState<mapboxgl.Map | null>(null)\n  const mapContainer = useRef<HTMLDivElement | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const paintMozaic = async (map: mapboxgl.Map): Promise<void> => {\n    setIsLoading(true)\n    showMapboxCanvas()\n    const mapboxCanvas = map.getCanvas()\n    const gl = mapboxCanvas.getContext('webgl')\n    if (!gl) {\n      console.log('pas de gl')\n      return\n    }\n    const W = gl.drawingBufferWidth\n    const H = gl.drawingBufferHeight\n\n    const mapozaicCanvas = document.getElementById('mapozaic-cvs') as HTMLCanvasElement\n    mapozaicCanvas.setAttribute('width', W.toString())\n    mapozaicCanvas.setAttribute('height', H.toString())\n    const mapozaicContext = mapozaicCanvas.getContext('2d')\n    if (!mapozaicContext) {\n      return\n    }\n    const imageData = mapozaicContext.getImageData(0, 0, mapozaicCanvas.width, mapozaicCanvas.height)\n    const mapozaicData = imageData.data\n    const mapboxPixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4)\n    gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, mapboxPixels)\n    paintWorker.onmessage = function (e): void {\n      imageData.data.set(e.data)\n      mapozaicContext.putImageData(imageData, 0, 0)\n      const mapboxElement = document.getElementById('mapbox-cvs') as HTMLCanvasElement\n      mapboxElement.style.opacity = '0'\n      mapozaicCanvas.style.opacity = '1'\n      setIsLoading(false)\n    }\n    paintWorker.postMessage({ mapboxPixels, mapozaicData, W, H })\n  }\n\n  useEffect(() => {\n    mapboxgl.accessToken = token\n    const initializeMap = (mapContainer: MutableRefObject<HTMLDivElement | null>): void => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current ? mapContainer.current : '',\n        style: 'mapbox://styles/cartapuce/ck831v1pi187r1inxwf7np531', // stylesheet location\n        // style: 'mapbox://styles/mapbox/streets-v11',\n        zoom: 12,\n        center: {\n          lng: 2.338272,\n          lat: 48.858796,\n        },\n      })\n\n      map.on('load', () => {\n        setMap(map)\n        map.resize()\n      })\n      map.on('dragstart', showMapboxCanvas)\n      map.on('zoomstart', showMapboxCanvas)\n      map.on('render', () => {\n        if (!map.loaded() || map.isMoving() || map.isZooming()) {\n          return\n        }\n        paintWorker.terminate()\n        paintWorker = new PaintWorker()\n        paintMozaic(map)\n      })\n    }\n\n    if (!map && mapContainer) {\n      initializeMap(mapContainer)\n    }\n  }, [map])\n\n  return (\n    <div className=\"container\">\n      <canvas className=\"mozaic\" width=\"300\" height=\"300\" id=\"mapozaic-cvs\" />\n      <div id=\"mapbox-cvs\" ref={(el) => (mapContainer.current = el)} style={styles} />\n      {isLoading && <div className=\"loading\">Loading...</div>}\n    </div>\n  )\n}\n\nexport default MapboxGLMap\n","import React from 'react'\nimport './App.css'\nimport Mapozaic from './Mapozaic/Mapozaic'\n\nfunction App() {\n  return <Mapozaic />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}