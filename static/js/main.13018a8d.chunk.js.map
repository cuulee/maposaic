{"version":3,"sources":["Mapozaic/GeoSearchInput.tsx","Mapozaic/Drawer.tsx","Mapozaic/Mapozaic.tsx","App.tsx","serviceWorker.ts","index.tsx","Mapozaic/paint.worker.ts"],"names":["Option","GeoSearch","flyTo","currentCenter","useState","searchText","setSearchText","options","setOptions","handleSearch","value","a","length","request","MAPBOX_TOKEN","fetch","res","json","body","features","optionChildren","map","option","place_name","split","address","rest","key","id","style","fontWeight","join","width","onSearch","onSelect","targetOption","find","center","placeholder","Drawer","visible","setDrawerVisible","mapboxStyleURL","changeMapStyle","setNewRoadColorThreshold","setNewSimilarColorTolerance","INITIAL_ROAD_COLOR_THRESHOLD","localRoadColorThreshold","setLocalRoadColorThreshold","INITIAL_SIMILAR_COLOR_TOLERANCE","localSimilarColorTolerance","setLocalSimilarColorTolerance","onSliderChange","changeCallback","placement","onClose","closable","Group","onChange","event","target","MAPBOX_STYLE_URL","road","water","administrative","min","max","range","onAfterChange","process","mapboxgl","accessToken","styles","height","position","paintWorker","PaintWorker","showMapboxCanvas","isMapbox","mapboxElement","document","getElementById","mosaicElement","opacity","MapboxGLMap","setMap","mapContainer","useRef","setMapboxStyleURL","isLoading","setIsLoading","roadColorThreshold","setRoadColorThreshold","similarColorTolerance","setSimilarColorTolerance","setCurrentCenter","useEffect","paintMosaic","newMap","mapboxCanvas","getCanvas","gl","getContext","console","log","webglWidth","drawingBufferWidth","webglHeight","drawingBufferHeight","viewportWidth","viewportHeight","maposaicCanvas","setAttribute","toString","maposaicContext","imageData","getImageData","maposaicData","data","mapboxPixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","onmessage","e","set","putImageData","postMessage","getCenter","LngLat","zoom","getZoom","remove","Map","container","current","on","resize","loaded","isMoving","isZooming","terminate","lng","lat","drawerVisible","className","ref","el","spinning","indicator","LoadingOutlined","newStyle","threshold","tolerance","setCenter","type","shape","onClick","icon","RightCircleFilled","App","Mapozaic","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","Worker"],"mappings":"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","file":"static/js/main.13018a8d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { AutoComplete } from 'antd'\nimport { MAPBOX_TOKEN } from './Mapozaic'\nimport { DrawerPropsType } from './Drawer'\n\nconst { Option } = AutoComplete\ntype GeocoderFeature = {\n  id: string\n  place_name: string\n  center: [number, number]\n}\n\ntype GeocoderResult = {\n  features: GeocoderFeature[]\n}\nconst baseurl = 'https://api.mapbox.com/geocoding/v5/mapbox.places'\n\nconst GeoSearch = ({\n  flyTo,\n  currentCenter,\n}: {\n  flyTo: DrawerPropsType['flyTo']\n  currentCenter: DrawerPropsType['currentCenter']\n}) => {\n  const [searchText, setSearchText] = useState('')\n  const [options, setOptions] = useState<GeocoderFeature[]>([])\n\n  const handleSearch = async (value: string) => {\n    setSearchText(value)\n    if (value.length < 1) {\n      setOptions([])\n      return\n    }\n    const request = `${baseurl}/${value}.json?limit=5&language=fr-FR&access_token=${MAPBOX_TOKEN}&proximity=${currentCenter[0]}%2C${currentCenter[1]}`\n    const res = await fetch(request)\n    const body: GeocoderResult = await res.json()\n    setOptions(body.features)\n  }\n\n  const handleSelect = (value: string) => {\n    const targetOption = options.find((option) => option.id === value)\n    if (targetOption) {\n      flyTo(targetOption.center)\n    }\n  }\n\n  const optionChildren = options.map((option) => {\n    const [address, ...rest] = option.place_name.split(',')\n    return (\n      <Option key={option.id} value={option.id}>\n        <div style={{ fontWeight: 500 }}>{address}</div>\n        <div>{rest.join('')}</div>\n      </Option>\n    )\n  })\n\n  return (\n    <AutoComplete\n      style={{ width: 200 }}\n      onSearch={handleSearch}\n      onSelect={handleSelect}\n      value={searchText}\n      placeholder=\"Search location\"\n    >\n      {optionChildren}\n    </AutoComplete>\n  )\n}\n\nexport default GeoSearch\n","import React, { useState } from 'react'\nimport { Drawer as AntDrawer, Radio, Divider, Slider } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\nimport { MAPBOX_STYLE_URL, INITIAL_ROAD_COLOR_THRESHOLD, INITIAL_SIMILAR_COLOR_TOLERANCE } from './Mapozaic'\nimport { SliderValue } from 'antd/lib/slider'\nimport GeoSearch from './GeoSearchInput'\n\nexport type DrawerPropsType = {\n  visible: boolean\n  setDrawerVisible: (visible: boolean) => void\n  mapboxStyleURL: string\n  changeMapStyle: (style: string) => void\n  setNewRoadColorThreshold: (threshold: number) => void\n  setNewSimilarColorTolerance: (tolerance: number) => void\n  flyTo: (center: [number, number]) => void\n  currentCenter: [number, number]\n}\n\nconst Drawer = ({\n  visible,\n  setDrawerVisible,\n  mapboxStyleURL,\n  changeMapStyle,\n  setNewRoadColorThreshold,\n  setNewSimilarColorTolerance,\n  flyTo,\n  currentCenter,\n}: DrawerPropsType) => {\n  const onStyleUrlChange = (event: RadioChangeEvent) => {\n    changeMapStyle(event.target.value)\n  }\n  const [localRoadColorThreshold, setLocalRoadColorThreshold] = useState(INITIAL_ROAD_COLOR_THRESHOLD)\n  const [localSimilarColorTolerance, setLocalSimilarColorTolerance] = useState(INITIAL_SIMILAR_COLOR_TOLERANCE)\n\n  const onSliderChange = (value: SliderValue, changeCallback: (n: number) => void) => {\n    if (typeof value === 'number') {\n      changeCallback(value)\n    } else {\n      changeCallback(value[0])\n    }\n  }\n\n  return (\n    <AntDrawer visible={visible} placement=\"left\" onClose={() => setDrawerVisible(false)} closable={false}>\n      <GeoSearch flyTo={flyTo} currentCenter={currentCenter} />\n      <Divider />\n      <Radio.Group onChange={onStyleUrlChange} value={mapboxStyleURL}>\n        <Radio value={MAPBOX_STYLE_URL.road}>Road boundaries</Radio>\n        <Radio value={MAPBOX_STYLE_URL.water}>Water boundaries</Radio>\n        <Radio value={MAPBOX_STYLE_URL.administrative}>Administrative boundaries</Radio>\n      </Radio.Group>\n      <Divider />\n      <p>Boundary detection threshold</p>\n      <Slider\n        min={0}\n        max={255}\n        range={false}\n        value={localRoadColorThreshold}\n        onAfterChange={() => setNewRoadColorThreshold(localRoadColorThreshold)}\n        onChange={(value) => onSliderChange(value, setLocalRoadColorThreshold)}\n      />\n      <p>Fill Color Tolerance</p>\n      <Slider\n        min={0}\n        max={20}\n        range={false}\n        value={localSimilarColorTolerance}\n        onAfterChange={() => setNewSimilarColorTolerance(localSimilarColorTolerance)}\n        onChange={(value) => onSliderChange(value, setLocalSimilarColorTolerance)}\n      />\n    </AntDrawer>\n  )\n}\n\nexport default Drawer\n","import React, { useState, useRef, useEffect } from 'react'\nimport mapboxgl from 'mapbox-gl'\n// import 'mapbox-gl/dist/mapbox-gl.css'\nimport { Button } from 'antd'\nimport { RightCircleFilled } from '@ant-design/icons'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { Spin } from 'antd'\n\nimport Drawer from './Drawer'\n\n// eslint-disable-next-line\nimport PaintWorker from 'worker-loader!./paint.worker'\n\nimport './style.css'\n\n// eslint-disable-next-line\nexport const MAPBOX_TOKEN: string = process.env['REACT_APP_MAPBOX_TOKEN'] || ''\nmapboxgl.accessToken = MAPBOX_TOKEN\n\nexport const MAPBOX_STYLE_URL = {\n  road: 'mapbox://styles/cartapuce/ck8vk01zo2e5w1ipmytroxgf4',\n  water: 'mapbox://styles/cartapuce/ck8ynyj0x022h1hpmffi87im9',\n  administrative: 'mapbox://styles/cartapuce/ck8vkvxjt27z71ila3b3jecka',\n  // regular: 'mapbox://styles/mapbox/streets-v11',\n}\n\nexport const INITIAL_ROAD_COLOR_THRESHOLD = 50\nexport const INITIAL_SIMILAR_COLOR_TOLERANCE = 3\n\nconst styles = {\n  width: '100vw',\n  height: 'calc(100vh)',\n  position: 'absolute',\n} as React.CSSProperties\n\nexport type RGBColor = { r: number; g: number; b: number }\nexport type imagePoint = { x: number; y: number }\n\nlet paintWorker = new PaintWorker()\n\nconst showMapboxCanvas = (isMapbox: boolean): void => {\n  const mapboxElement = document.getElementById('mapbox-cvs') as HTMLCanvasElement\n  const mosaicElement = document.getElementById('maposaic-cvs') as HTMLCanvasElement\n  mapboxElement.style.opacity = isMapbox ? '1' : '0'\n  mosaicElement.style.opacity = isMapbox ? '0' : '1'\n}\n\nconst MapboxGLMap = (): JSX.Element => {\n  const [map, setMap] = useState<mapboxgl.Map | null>(null)\n  const mapContainer = useRef<HTMLDivElement | null>(null)\n\n  const [mapboxStyleURL, setMapboxStyleURL] = useState(MAPBOX_STYLE_URL.road)\n  const [isLoading, setIsLoading] = useState(false)\n  const [roadColorThreshold, setRoadColorThreshold] = useState(INITIAL_ROAD_COLOR_THRESHOLD)\n  const [similarColorTolerance, setSimilarColorTolerance] = useState(INITIAL_SIMILAR_COLOR_TOLERANCE)\n  const [currentCenter, setCurrentCenter] = useState<[number, number]>([0, 0])\n\n  useEffect(() => {\n    const paintMosaic = async (newMap: mapboxgl.Map): Promise<void> => {\n      setIsLoading(true)\n      showMapboxCanvas(true)\n      const mapboxCanvas = newMap.getCanvas()\n      const gl = mapboxCanvas.getContext('webgl')\n      if (!gl) {\n        console.log('pas de gl')\n        return\n      }\n      const webglWidth = gl.drawingBufferWidth\n      const webglHeight = gl.drawingBufferHeight\n      const viewportWidth = webglWidth\n      const viewportHeight = webglHeight\n\n      const maposaicCanvas = document.getElementById('maposaic-cvs') as HTMLCanvasElement\n      maposaicCanvas.setAttribute('width', viewportWidth.toString())\n      maposaicCanvas.setAttribute('height', viewportHeight.toString())\n      const maposaicContext = maposaicCanvas.getContext('2d')\n      if (!maposaicContext) {\n        return\n      }\n      const imageData = maposaicContext.getImageData(0, 0, maposaicCanvas.width, maposaicCanvas.height)\n      const maposaicData = imageData.data\n\n      const mapboxPixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4)\n      gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, mapboxPixels)\n\n      paintWorker.onmessage = function (e): void {\n        imageData.data.set(e.data)\n        maposaicContext.putImageData(imageData, 0, 0)\n        showMapboxCanvas(false)\n        setIsLoading(false)\n      }\n      paintWorker.postMessage({\n        mapboxPixels,\n        maposaicData,\n        webglWidth,\n        webglHeight,\n        viewportHeight,\n        viewportWidth,\n        roadColorThreshold,\n        similarColorTolerance,\n      })\n    }\n\n    const center = map ? map.getCenter() : new mapboxgl.LngLat(2.338272, 48.858796)\n    const zoom = map ? map.getZoom() : 12\n\n    if (map) {\n      map.remove()\n    }\n    const newMap = new mapboxgl.Map({\n      container: mapContainer.current ? mapContainer.current : '',\n      style: mapboxStyleURL,\n      zoom,\n      center,\n    })\n    newMap.on('load', () => {\n      setMap(newMap)\n      newMap.resize()\n    })\n    newMap.on('dragstart', showMapboxCanvas)\n    newMap.on('zoomstart', showMapboxCanvas)\n    newMap.on('render', () => {\n      if (!newMap.loaded() || newMap.isMoving() || newMap.isZooming()) {\n        return\n      }\n      paintWorker.terminate()\n      paintWorker = new PaintWorker()\n      paintMosaic(newMap)\n      setCurrentCenter([newMap.getCenter().lng, newMap.getCenter().lat])\n    })\n    // eslint-disable-next-line\n  }, [roadColorThreshold, similarColorTolerance, mapboxStyleURL])\n\n  const [drawerVisible, setDrawerVisible] = useState(false)\n\n  const changeMapStyle = (newStyle: string) => {\n    showMapboxCanvas(true)\n    setIsLoading(true)\n    setMapboxStyleURL(newStyle)\n  }\n\n  const setNewRoadColorThreshold = (threshold: number) => {\n    setRoadColorThreshold(threshold)\n    setIsLoading(true)\n  }\n  const setNewSimilarColorTolerance = (tolerance: number) => {\n    setSimilarColorTolerance(tolerance)\n    setIsLoading(true)\n  }\n\n  const flyTo = (center: [number, number]) => {\n    if (!map) {\n      return\n    }\n    showMapboxCanvas(true)\n    setIsLoading(true)\n    map.setCenter(center)\n  }\n\n  return (\n    <div className=\"container\">\n      <canvas className=\"mosaic-canvas\" width=\"300\" height=\"300\" id=\"maposaic-cvs\" />\n      <div id=\"mapbox-cvs\" className=\"mapbox-canvas\" ref={(el) => (mapContainer.current = el)} style={styles} />\n      <Spin spinning={isLoading} indicator={<LoadingOutlined />} />\n      <div className=\"overmap\">\n        <Drawer\n          visible={drawerVisible}\n          setDrawerVisible={setDrawerVisible}\n          changeMapStyle={changeMapStyle}\n          mapboxStyleURL={mapboxStyleURL}\n          setNewRoadColorThreshold={setNewRoadColorThreshold}\n          setNewSimilarColorTolerance={setNewSimilarColorTolerance}\n          flyTo={flyTo}\n          currentCenter={currentCenter}\n        />\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          onClick={() => {\n            setDrawerVisible(true)\n          }}\n          icon={<RightCircleFilled />}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default MapboxGLMap\n","import React from 'react'\nimport Mapozaic from './Mapozaic/Mapozaic'\n\nfunction App() {\n  return <Mapozaic />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"e60194eb2689f829a04c.worker.js\");\n};"],"sourceRoot":""}